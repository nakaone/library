<?xml version="1.0"?>
<opml version="2.0">
  <head>
    <ownerEmail>
      ena.kaon@gmail.com
    </ownerEmail>
  </head>
  <body>
    <outline text="GitHub Library">
      <outline text="Auth 1.1.0">
        <outline text="概要">
          <outline text="おおまかな流れ" _note="![](doc/summary.svg)&#10;" />
          <outline text="処理要求の流れ" _note="![](doc/query.svg)&#10;" />
          <outline text="新規登録の流れ" _note="![](doc/registration.svg)" />
        </outline>
        <outline text="authClient" _note="classとするとグローバルに呼び出すのが困難になるため、クロージャとする。&#10;但しクエリ呼び出しの都度CPkey他の設定値の変更を回避するため、onLoad時に変数として保存、クエリ実行時にはrequestメソッドを呼び出す形で運用する。&#10;">
          <outline text="cv - authClientのメンバ(client variables)">
            <outline text="opt {Object} authClientのオプション設定" _note="mirrorを除く起動時引数&quot;&lt;a href=&quot;https://workflowy.com/#/6e19dabbd5cc&quot;&gt;option&lt;/a&gt;&quot;に、引数での未定義項目に既定値を設定した物" />
            <outline text="userId {string} ユーザ識別子" _note="ゲストの場合はundefined" />
            <outline text="email {string} ユーザの連絡先メールアドレス" />
            <outline text="CSkey {Object} クライアント側秘密鍵" />
            <outline text="CPkey {string} クライアント側公開鍵" />
            <outline text="SPkey {string} サーバ側公開鍵" />
            <outline text="&lt;a href=&quot;https://workflowy.com/#/e6693b2cc4bd&quot;&gt;mirror&lt;/a&gt; {mirrorDef[]} ローカル側にミラーを保持するテーブルの定義" />
          </outline>
          <outline text="main: authClient主処理">
            <outline text="引数">
              <outline text="option {Object} &lt;a href=&quot;https://workflowy.com/#/3c211d58f127&quot;&gt;authClient/Server共通オプション&lt;/a&gt;に以下のメンバを加えた物(6e19dabbd5cc)">
                <outline text="saveUserId {boolean}=true userIdをlocalStorageに保存するか否か" />
                <outline text="saveEmail {boolean}=false e-mailをlocalStorageに保存するか否か" />
                <outline text="mirror {&lt;a href=&quot;https://workflowy.com/#/53d27b6201fa&quot;&gt;mirrorDef&lt;/a&gt;[]} ローカル側にミラーを保持するテーブルの定義">
                  <outline text="1 Backlink">
                    <outline text="&lt;a href=&quot;https://workflowy.com/#/e6693b2cc4bd&quot;&gt;mirror&lt;/a&gt; {mirrorDef[]} ローカル側にミラーを保持するテーブルの定義" />
                  </outline>
                </outline>
                <outline text="1 Backlink">
                  <outline text="opt {Object} authClientのオプション設定" _note="mirrorを除く起動時引数&quot;&lt;a href=&quot;https://workflowy.com/#/6e19dabbd5cc&quot;&gt;option&lt;/a&gt;&quot;に、引数での未定義項目に既定値を設定した物" />
                </outline>
              </outline>
              <outline text="1 Backlink">
                <outline text="引数 : &lt;a href=&quot;https://workflowy.com/#/f96870e08d4a&quot;&gt;mainの引数&lt;/a&gt;がそのまま渡される" />
              </outline>
            </outline>
            <outline text="戻り値 - authClientオブジェクト" />
          </outline>
          <outline text="constructor() : メンバの値設定、クエリのプロトタイプ作成">
            <outline text="処理概要">
              <outline text="引数の型チェック＋変換" />
              <outline text="メンバ(cv)に引数を保存、未指定分には既定値を設定" _note="&lt;a href=&quot;https://workflowy.com/#/3c211d58f127&quot;&gt;authClient/authServer共通オプション&lt;/a&gt;は引数で上書きしない&#10;" />
              <outline text="URLクエリパラメータからuserId, e-mailの取得を試行、取得できたらメンバおよびlocalStorageに保存" />
              <outline text="localStorageからuserId, e-mailの取得を試行、取得できたらメンバに保存" />
              <outline text="クライアント側鍵ペア未生成なら生成、メンバに保存" />
              <outline text="要求(クエリ)のプロトタイプを作成" />
              <outline text="opt.crondが指定されていたらセット" />
              <outline text="opt.mirrorが指定されていたらauthServerにテーブル管理情報を要求、createTableメソッドでテーブルを作成" />
            </outline>
            <outline text="引数 : &lt;a href=&quot;https://workflowy.com/#/f96870e08d4a&quot;&gt;mainの引数&lt;/a&gt;がそのまま渡される" />
            <outline text="戻り値 {null|Error}" />
          </outline>
          <outline text="request() : authServerに要求を送信">
            <outline text="引数">
              <outline text="query {Object|Object[]} &lt;a href=&quot;https://workflowy.com/#/accf9448cecc&quot;&gt;authQuery&lt;/a&gt;の内、「■」で示された以下メンバ">
                <outline text="■table {string} 操作対象テーブル名" />
                <outline text="■command {string} 操作名" _note="commandの種類は下表の通り。&#10;&quot;rwdos&quot;とは&quot;Read/Write/Delete/Own/Schema&quot;の頭文字。管理者のみ実行可能な&quot;c&quot;(createTable)と特殊権限&quot;o&quot;を加えてシート毎のアクセス制御を行う。&#10;&#10;内容 | command | rwdos&#10;:-- | :-- | :-- &#10;テーブル生成 | create | c&#10;参照 | select | r&#10;更新 | update | rw&#10;追加 | append/insert | w&#10;テーブル管理情報取得 | schema | s" />
                <outline text="■[where] {Object|Function|string} 対象レコードの判定条件" _note="command='select','update','delete'で使用&#10;&#10;- Object ⇒ {キー項目名:キー項目の値}形式で、key:valueに該当するレコードを更新&#10;- function ⇒ 行オブジェクトを引数に対象ならtrueを返す関数で、trueが返されたレコードを更新&#10;- string&#10;  - 無名関数またはアロー関数のソース文字列 ⇒ new Functionで関数化。{〜} で囲みreturn文を付与。&#10;  - その他 ⇒ 項目定義で&quot;primaryKey&quot;を指定した項目の値&#10;- その他(Object,function,string以外) ⇒ 項目定義で&quot;primaryKey&quot;を指定した項目の値&#10;" />
                <outline text="■[set] {Object|Object[]|string|string[]|Function} 追加・更新する値" _note="command='update','append'で使用&#10;&#10;- Object ⇒ appendなら行オブジェクト、updateなら{更新対象項目名:セットする値}&#10;- string ⇒ 上記Objectに変換可能なJSON文字列&#10;- Function ⇒ 行オブジェクトを引数に、上記Objectを返す関数&#10;  【例】abc欄にfuga+hogeの値をセットする : {func: o=&amp;gt;{return {abc:(o.fuga||0)+(o.hoge||0)}}}&#10;" />
              </outline>
            </outline>
            <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/accf9448cecc&quot;&gt;authQuery&lt;/a&gt;}" />
          </outline>
          <outline text="dialog() : email/パスコード入力ダイアログの表示・入力" />
          <outline text="syncTable() : authServer(SpreadDb.getSchema)の&lt;a href=&quot;https://workflowy.com/#/f76eb797d345&quot;&gt;戻り値&lt;/a&gt;を基にローカルDBにテーブルを作成、同期する">
            <outline text="処理概要">
              <outline text="ローカルに指定テーブル" />
            </outline>
            <outline text="引数">
              <outline text="arg {Object[]}">
                <outline text="" />
              </outline>
            </outline>
          </outline>
          <outline text="syncDb() : authServerの更新結果をローカル側DBに反映" />
        </outline>
        <outline text="authServer" _note="単一機能の提供のため、クロージャとする。">
          <outline text="sv - authServerのメンバ(server variables)" _note="server variables">
            <outline text="query {authQuery} 処理要求" _note="起動時は引数&quot;query&quot;のコピー、以降は各メソッドにより情報を付加&#10;" />
            <outline text="opt {Object} authClientのオプション設定" _note="起動時引数&quot;&lt;a href=&quot;https://workflowy.com/#/83ede73058e8&quot;&gt;option&lt;/a&gt;&quot;＋&lt;a href=&quot;https://workflowy.com/#/3c211d58f127&quot;&gt;authClient/Server共通オプション&lt;/a&gt;。共通オプションは引数で上書きしない&#10;" />
            <outline text="SPkey {string} サーバ側公開鍵" />
            <outline text="SSkey {Object} サーバ側秘密鍵" _note="DocumentProperties.SSkeyを`RSAKey.parse(DP.SSkey)`で復元した物&#10;" />
            <outline text="account {Object} accountsシートから抽出したユーザ情報(行オブジェクト)" />
            <outline text="device {Object} devicesシートから抽出したユーザ情報(行オブジェクト)" />
            <outline text="typedefs {Object.&amp;lt;string, &lt;a href=&quot;https://workflowy.com/#/b9bea3e5ffc9&quot;&gt;sdbColumn&lt;/a&gt;[]&amp;gt;} オブジェクトの項目定義集" />
            <outline text="DocumentProperties {&lt;a href=&quot;https://developers.google.com/apps-script/reference/properties/properties-service?hl=ja&quot;&gt;PropertiesService&lt;/a&gt;} ドキュメントプロパティ本体" />
          </outline>
          <outline text="main: authServer主処理">
            <outline text="引数">
              <outline text="query {Object} &lt;a href=&quot;https://workflowy.com/#/accf9448cecc&quot;&gt;authQuery&lt;/a&gt;の内、「■」または「□」で示された以下メンバ" _note="ユーザ側にCS/SPkeyが有った場合、暗号化＋署名&#10;">
                <outline text="■table {string} 操作対象テーブル名" />
                <outline text="■command {string} 操作名" _note="commandの種類は下表の通り。&#10;&quot;rwdos&quot;とは&quot;Read/Write/Delete/Own/Schema&quot;の頭文字。管理者のみ実行可能な&quot;c&quot;(createTable)と特殊権限&quot;o&quot;を加えてシート毎のアクセス制御を行う。&#10;&#10;内容 | command | rwdos&#10;:-- | :-- | :-- &#10;テーブル生成 | create | c&#10;参照 | select | r&#10;更新 | update | rw&#10;追加 | append/insert | w&#10;テーブル管理情報取得 | schema | s" />
                <outline text="■[where] {Object|Function|string} 対象レコードの判定条件" _note="command='select','update','delete'で使用&#10;&#10;- Object ⇒ {キー項目名:キー項目の値}形式で、key:valueに該当するレコードを更新&#10;- function ⇒ 行オブジェクトを引数に対象ならtrueを返す関数で、trueが返されたレコードを更新&#10;- string&#10;  - 無名関数またはアロー関数のソース文字列 ⇒ new Functionで関数化。{〜} で囲みreturn文を付与。&#10;  - その他 ⇒ 項目定義で&quot;primaryKey&quot;を指定した項目の値&#10;- その他(Object,function,string以外) ⇒ 項目定義で&quot;primaryKey&quot;を指定した項目の値&#10;" />
                <outline text="■[set] {Object|Object[]|string|string[]|Function} 追加・更新する値" _note="command='update','append'で使用&#10;&#10;- Object ⇒ appendなら行オブジェクト、updateなら{更新対象項目名:セットする値}&#10;- string ⇒ 上記Objectに変換可能なJSON文字列&#10;- Function ⇒ 行オブジェクトを引数に、上記Objectを返す関数&#10;  【例】abc欄にfuga+hogeの値をセットする : {func: o=&amp;gt;{return {abc:(o.fuga||0)+(o.hoge||0)}}}&#10;" />
                <outline text="□timestamp {string}=toLocale(new Date()) 更新日時(ISO8601拡張形式)" />
                <outline text="□userId {string|number}=&quot;guest&quot; ユーザ識別子(uuid等)" />
                <outline text="□queryId {string}=UUID クエリ・結果突合用文字列" />
                <outline text="□[email] {string} ユーザのメールアドレス" />
                <outline text="□[CPkey] {string} ユーザの公開鍵" />
                <outline text="□[passcode] {number|string} 入力されたパスコード" _note="開発時はauthClient/authServerへの引数として扱う(∵自動テスト用)。リリース時には引数として与えるのは不可とする&#10;&#10;- authClientへの引数：ダイアログから入力されたパスコードの代替。配列可&#10;- authServerへの引数：乱数で発生させるパスコードの代替&#10;" />
              </outline>
              <outline text="option {Object} &lt;a href=&quot;https://workflowy.com/#/3c211d58f127&quot;&gt;authClient/Server共通オプション&lt;/a&gt;に以下のメンバを加えた物(83ede73058e8)">
                <outline text="DocPropName {string}=&quot;authServer&quot; DocumentPropertiesの項目名" />
                <outline text="sdbOption {&lt;a href=&quot;https://workflowy.com/#/a4a26014ccb3&quot;&gt;sdbOption&lt;/a&gt;} SpreadDbのオプション" />
                <outline text="accountsTableName {string}='accounts' &lt;a href=&quot;https://workflowy.com/#/2f8a77eb6f10&quot;&gt;アカウント管理シート&lt;/a&gt;の名前" />
                <outline text="devicesTableName {string}='devices' &lt;a href=&quot;https://workflowy.com/#/ae550a40dc50&quot;&gt;デバイス管理シート&lt;/a&gt;の名前" />
                <outline text="guestAccount {&lt;a href=&quot;https://workflowy.com/#/2f8a77eb6f10&quot;&gt;accounts&lt;/a&gt;}={} ゲストのアカウント管理設定" _note="既定値はアカウント管理シートの既定値を流用" />
                <outline text="guestDevice {&lt;a href=&quot;https://workflowy.com/#/ae550a40dc50&quot;&gt;devices&lt;/a&gt;}={} ゲストのデバイス管理設定" _note="既定値はデバイス管理シートの既定値を流用" />
                <outline text="newAccount {&lt;a href=&quot;https://workflowy.com/#/2f8a77eb6f10&quot;&gt;accounts&lt;/a&gt;}={} 新規登録者のアカウント管理設定" _note="既定値はアカウント管理シートの既定値を流用" />
                <outline text="newDevice {&lt;a href=&quot;https://workflowy.com/#/ae550a40dc50&quot;&gt;devices&lt;/a&gt;}={} 新規登録者のデバイス管理設定" _note="既定値はデバイス管理シートの既定値を流用" />
                <outline text="validitySpan {number}=1,209,600,000(2週間) アカウントの有効期間" />
                <outline text="1 Backlink">
                  <outline text="opt {Object} authClientのオプション設定" _note="起動時引数&quot;&lt;a href=&quot;https://workflowy.com/#/83ede73058e8&quot;&gt;option&lt;/a&gt;&quot;＋&lt;a href=&quot;https://workflowy.com/#/3c211d58f127&quot;&gt;authClient/Server共通オプション&lt;/a&gt;。共通オプションは引数で上書きしない&#10;" />
                </outline>
              </outline>
              <outline text="1 Backlink">
                <outline text="引数 : &lt;a href=&quot;https://workflowy.com/#/6f1ce86a8fb5&quot;&gt;mainの引数&lt;/a&gt;がそのまま渡される" />
              </outline>
            </outline>
            <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/accf9448cecc&quot;&gt;authQuery&lt;/a&gt;}" />
          </outline>
          <outline text="constructor() : メンバの値設定、accounts/devicesシートの準備">
            <outline text="処理概要">
              <outline text="引数の型チェック＋変換" />
              <outline text="メンバ(sv)に引数を保存、未指定分には既定値を設定" _note="&lt;a href=&quot;https://workflowy.com/#/3c211d58f127&quot;&gt;authClient/authServer共通オプション&lt;/a&gt;は引数で上書きしない&#10;" />
              <outline text="DocumentPropertiesからSS/SPkeyを取得。未生成なら生成、DocumentPropertiesに保存" />
              <outline text="accounts/devicesシートが未作成なら追加" />
            </outline>
            <outline text="引数 : &lt;a href=&quot;https://workflowy.com/#/6f1ce86a8fb5&quot;&gt;mainの引数&lt;/a&gt;がそのまま渡される" />
            <outline text="戻り値 {null|Error}" />
          </outline>
          <outline text="functionalyze() : オブジェクト・関数文字列から既定値を導出する関数を作成" _note="objectizeColumn()のdefaultを関数化する。" />
          <outline text="objectizeColumn() : &lt;a href=&quot;https://workflowy.com/#/b9bea3e5ffc9&quot;&gt;項目定義メタ情報&lt;/a&gt;(JSDoc)からオブジェクトを生成">
            <outline text="引数">
              <outline text="arg {&lt;a href=&quot;https://workflowy.com/#/b9bea3e5ffc9&quot;&gt;sdbColumn&lt;/a&gt;[]|string} 文字列の場合、sv.opt以下に定義されているメンバ(typedef)と看做す">
                <outline text="name {string} 生成するオブジェクト内のメンバ名" />
                <outline text="default {string|function} メンバ名にセットする値(functionalyzeの引数)" />
              </outline>
            </outline>
            <outline text="戻り値 {Object} 生成されたオブジェクト" />
          </outline>
          <outline text="registUser() : ユーザ管理情報を生成、シートに追加" />
        </outline>
        <outline text="DocumentProperties" _note="プロパティ名はauthServer.option.DocPropNameで指定&#10;">
          <outline text="SPkey {string} サーバ側公開鍵" />
          <outline text="SSkey {string} サーバ側秘密鍵" _note="復元は`RSAKey.parse(v.r.sKey)`で行う" />
        </outline>
        <outline text="使用シートおよび項目定義">
          <outline text="accounts - アカウント管理シートの項目(2f8a77eb6f10)">
            <outline text="userId {string|number}='guest' ユーザ識別子(primaryKey)" _note="default:101(0〜100はシステム用に留保), primaryKey&#10;" />
            <outline text="note {string}='' アカウント情報(備考)" />
            <outline text="validityStart {string}=Date.now() 有効期間開始日時(ISO8601文字列)" />
            <outline text="validityEnd {string}=validityStart+opt.validitySpan 有効期間終了日時(ISO8601文字列)" />
            <outline text="authority {JSON}={} シート毎のアクセス権限。&lt;code&gt;{シート名:rwdos文字列}&lt;/code&gt; 形式、既定値はアクセス権無し" />
            <outline text="created {string}=Date.now() ユーザ登録日時(ISO8601拡張形式)" />
            <outline text="updated {string}=Date.now() 最終更新日時(ISO8601拡張形式)" />
            <outline text="deleted {string}='' 論理削除日時" />
            <outline text="3 Backlinks">
              <outline text="newAccount {&lt;a href=&quot;https://workflowy.com/#/2f8a77eb6f10&quot;&gt;accounts&lt;/a&gt;}={} 新規登録者のアカウント管理設定" _note="既定値はアカウント管理シートの既定値を流用" />
              <outline text="guestAccount {&lt;a href=&quot;https://workflowy.com/#/2f8a77eb6f10&quot;&gt;accounts&lt;/a&gt;}={} ゲストのアカウント管理設定" _note="既定値はアカウント管理シートの既定値を流用" />
              <outline text="accountsTableName {string}='accounts' &lt;a href=&quot;https://workflowy.com/#/2f8a77eb6f10&quot;&gt;アカウント管理シート&lt;/a&gt;の名前" />
            </outline>
          </outline>
          <outline text="devices - デバイス管理シートの項目(ae550a40dc50)" _note="複数デバイスでの単一アカウントの使用を可能にするため「account.userId(1) : device.userId(n)」で作成&#10;">
            <outline text="userId {string|number}='guest' ユーザ識別子" _note="not null" />
            <outline text="email {string}=opt.adminMail ユーザのメールアドレス(unique)" _note="primaryKey&#10;" />
            <outline text="name {string}='ゲスト' ユーザの氏名" />
            <outline text="phone {string}=''ユーザの電話番号" />
            <outline text="address {string}='' ユーザの住所" />
            <outline text="note {string}='' ユーザ情報(備考)" />
            <outline text="CPkey {string}='' クライアント側公開鍵" />
            <outline text="CPkeyExpiry {string}='' CPkey有効期限(ISO8601拡張形式)" _note="期限内に適切な暗号化・署名された要求はOKとする&#10;" />
            <outline text="trial {&lt;a href=&quot;https://workflowy.com/#/aaab38c8e75d&quot;&gt;authTrial&lt;/a&gt;} ログイン試行情報" />
            <outline text="created {string}=Date.now() ユーザ登録日時(ISO8601拡張形式)" />
            <outline text="updated {string}=Date.now() 最終更新日時(ISO8601拡張形式)" />
            <outline text="deleted {string}='' 論理削除日時" />
            <outline text="3 Backlinks">
              <outline text="newDevice {&lt;a href=&quot;https://workflowy.com/#/ae550a40dc50&quot;&gt;devices&lt;/a&gt;}={} 新規登録者のデバイス管理設定" _note="既定値はデバイス管理シートの既定値を流用" />
              <outline text="guestDevice {&lt;a href=&quot;https://workflowy.com/#/ae550a40dc50&quot;&gt;devices&lt;/a&gt;}={} ゲストのデバイス管理設定" _note="既定値はデバイス管理シートの既定値を流用" />
              <outline text="devicesTableName {string}='devices' &lt;a href=&quot;https://workflowy.com/#/ae550a40dc50&quot;&gt;デバイス管理シート&lt;/a&gt;の名前" />
            </outline>
          </outline>
          <outline text="log - SpreadDbのアクセスログシート" _note="詳細はSpreadDb.&lt;a href=&quot;https://workflowy.com/#/dab8cfcec9d8&quot;&gt;sdbLog&lt;/a&gt;参照" />
        </outline>
        <outline text="typedefs">
          <outline text="authQuery {Object[]} 操作要求の内容(accf9448cecc)" _note="- ■：authClientへの引数、□：authServerへの引数(authClientでの追加項目)、〇：authServerでの追加項目&#10;- SpreadDbの&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;からの差分項目&#10;  - 削除項目：cols, arg&#10;  - 追加項目：email, CPkey, passcode, SPkey, status&#10;- command=&quot;delete&quot;(物理削除)は使用不可とし、論理削除で対応&amp;lt;br&amp;gt;(万一のハッキング時のリスク軽減)&#10;">
            <outline text="■table {string} 操作対象テーブル名" />
            <outline text="■command {string} 操作名" _note="commandの種類は下表の通り。&#10;&quot;rwdos&quot;とは&quot;Read/Write/Delete/Own/Schema&quot;の頭文字。管理者のみ実行可能な&quot;c&quot;(createTable)と特殊権限&quot;o&quot;を加えてシート毎のアクセス制御を行う。&#10;&#10;内容 | command | rwdos&#10;:-- | :-- | :-- &#10;テーブル生成 | create | c&#10;参照 | select | r&#10;更新 | update | rw&#10;追加 | append/insert | w&#10;テーブル管理情報取得 | schema | s" />
            <outline text="■[where] {Object|Function|string} 対象レコードの判定条件" _note="command='select','update','delete'で使用&#10;&#10;- Object ⇒ {キー項目名:キー項目の値}形式で、key:valueに該当するレコードを更新&#10;- function ⇒ 行オブジェクトを引数に対象ならtrueを返す関数で、trueが返されたレコードを更新&#10;- string&#10;  - 無名関数またはアロー関数のソース文字列 ⇒ new Functionで関数化。{〜} で囲みreturn文を付与。&#10;  - その他 ⇒ 項目定義で&quot;primaryKey&quot;を指定した項目の値&#10;- その他(Object,function,string以外) ⇒ 項目定義で&quot;primaryKey&quot;を指定した項目の値&#10;" />
            <outline text="■[set] {Object|Object[]|string|string[]|Function} 追加・更新する値" _note="command='update','append'で使用&#10;&#10;- Object ⇒ appendなら行オブジェクト、updateなら{更新対象項目名:セットする値}&#10;- string ⇒ 上記Objectに変換可能なJSON文字列&#10;- Function ⇒ 行オブジェクトを引数に、上記Objectを返す関数&#10;  【例】abc欄にfuga+hogeの値をセットする : {func: o=&amp;gt;{return {abc:(o.fuga||0)+(o.hoge||0)}}}&#10;" />
            <outline text="□queryId {string}=UUID クエリ・結果突合用文字列" />
            <outline text="□timestamp {string}=toLocale(new Date()) 更新日時(ISO8601拡張形式)" />
            <outline text="□userId {string|number}=&quot;guest&quot; ユーザ識別子(uuid等)" />
            <outline text="□CPkey {string} ユーザの公開鍵" />
            <outline text="□[email] {string} ユーザのメールアドレス" />
            <outline text="□[passcode] {number|string} 入力されたパスコード" _note="開発時はauthClient/authServerへの引数として扱う(∵自動テスト用)。リリース時には引数として与えるのは不可とする&#10;&#10;- authClientへの引数：ダイアログから入力されたパスコードの代替。配列可&#10;- authServerへの引数：乱数で発生させるパスコードの代替&#10;" />
            <outline text="〇SPkey {string} サーバ側公開鍵" />
            <outline text="〇qSts {string} クエリ単位の実行結果" _note="正常終了なら&quot;OK&quot;。エラーコードは以下の通り。&#10;- create : &quot;Already Exist&quot;, &quot;No Cols and Data&quot;&#10;- その他 : &quot;No Table&quot;" />
            <outline text="〇num {number} 変更された行数" _note="append:追加行数、update:変更行数、select:抽出行数、schema:0(固定)&#10;" />
            <outline text="〇result {&lt;a href=&quot;https://workflowy.com/#/d2f620e47c51&quot;&gt;sdbResult&lt;/a&gt;[]} レコード単位の実行結果" />
            <outline text="〇status {string} authServerの実行結果" _note="必要に応じてauthClientで追加変更" />
            <outline text="4 Backlinks">
              <outline text="query {Object} &lt;a href=&quot;https://workflowy.com/#/accf9448cecc&quot;&gt;authQuery&lt;/a&gt;の内、「■」または「□」で示された以下メンバ" _note="ユーザ側にCS/SPkeyが有った場合、暗号化＋署名&#10;" />
              <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/accf9448cecc&quot;&gt;authQuery&lt;/a&gt;}" />
              <outline text="query {Object|Object[]} &lt;a href=&quot;https://workflowy.com/#/accf9448cecc&quot;&gt;authQuery&lt;/a&gt;の内、「■」で示された以下メンバ" />
              <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/accf9448cecc&quot;&gt;authQuery&lt;/a&gt;}" />
            </outline>
          </outline>
          <outline text="authTrial {Object} ログイン試行関連情報">
            <outline text="passcode {number} 設定されたパスコード" />
            <outline text="datetime {string} パスコード通知メール送信日時" _note="パスコード要求(client)&amp;gt;要求受領(server)&amp;gt;パスコード生成&amp;gt;通知メール送信の内、メール送信日時&#10;" />
            <outline text="log {Object[]} 試行履歴情報">
              <outline text="dt {string} パスコード検証日時(Date Time)" />
              <outline text="pc {number} ユーザが入力したパスコード(PassCode)" />
              <outline text="st {number} ステータス(STatus)" />
            </outline>
            <outline text="thawing {string}='1970/01/01' 凍結解除日時" />
            <outline text="1 Backlink">
              <outline text="trial {&lt;a href=&quot;https://workflowy.com/#/aaab38c8e75d&quot;&gt;authTrial&lt;/a&gt;} ログイン試行情報" />
            </outline>
          </outline>
          <outline text="commonOption {Object} authClient/authServer共通オプション(3c211d58f127)" _note="以下は共通性維持のため、authClient/authServer起動時オプションでの変更は不可とする。&amp;lt;br&amp;gt;変更が必要な場合、build前のソースで変更する。">
            <outline text="tokenExpiry {number}=600,000(10分) トークンの有効期間(ミリ秒)" />
            <outline text="passcodeDigit {number}=6  パスコードの桁数" />
            <outline text="passcodeExpiry {number}=600,000(10分) パスコードの有効期間(ミリ秒)" _note="メール送信〜受領〜パスコード入力〜送信〜確認処理終了までの時間。通信に係る時間も含む。不正防止のため、始点/終点ともサーバ側で時刻を設定する。" />
            <outline text="maxTrial {number}=3 パスコード入力の最大試行回数" />
            <outline text="validityExpiry {number}=86,400,000(1日) ログイン有効期間(ミリ秒)" _note="有効期間を超えた場合は再ログインを必要とする" />
            <outline text="maxDevices {number}=5 単一アカウントで使用可能なデバイスの最大数" />
            <outline text="freezing {number}=3600000 連続失敗した場合の凍結期間。ミリ秒。既定値1時間" />
            <outline text="bits {number}=2048 RSA鍵ペアの鍵長" />
            <outline text="adminMail {string} 管理者のメールアドレス" />
            <outline text="adminName {string} 管理者名" />
            <outline text="5 Backlinks">
              <outline text="opt {Object} authClientのオプション設定" _note="起動時引数&quot;&lt;a href=&quot;https://workflowy.com/#/83ede73058e8&quot;&gt;option&lt;/a&gt;&quot;＋&lt;a href=&quot;https://workflowy.com/#/3c211d58f127&quot;&gt;authClient/Server共通オプション&lt;/a&gt;。共通オプションは引数で上書きしない&#10;" />
              <outline text="メンバ(sv)に引数を保存、未指定分には既定値を設定" _note="&lt;a href=&quot;https://workflowy.com/#/3c211d58f127&quot;&gt;authClient/authServer共通オプション&lt;/a&gt;は引数で上書きしない&#10;" />
              <outline text="メンバ(cv)に引数を保存、未指定分には既定値を設定" _note="&lt;a href=&quot;https://workflowy.com/#/3c211d58f127&quot;&gt;authClient/authServer共通オプション&lt;/a&gt;は引数で上書きしない&#10;" />
              <outline text="option {Object} &lt;a href=&quot;https://workflowy.com/#/3c211d58f127&quot;&gt;authClient/Server共通オプション&lt;/a&gt;に以下のメンバを加えた物(6e19dabbd5cc)" />
              <outline text="option {Object} &lt;a href=&quot;https://workflowy.com/#/3c211d58f127&quot;&gt;authClient/Server共通オプション&lt;/a&gt;に以下のメンバを加えた物(83ede73058e8)" />
            </outline>
          </outline>
          <outline text="mirrorDef {Object} ミラーリングするテーブルの定義(53d27b6201fa)" _note="crond.set(), crond.clear()共通&#10;">
            <outline text="name {string} テーブル名" />
            <outline text="func {function} ジョブ本体" />
            <outline text="interval {number}=300000 実行間隔(ミリ秒)" />
            <outline text="1 Backlink">
              <outline text="mirror {&lt;a href=&quot;https://workflowy.com/#/53d27b6201fa&quot;&gt;mirrorDef&lt;/a&gt;[]} ローカル側にミラーを保持するテーブルの定義" />
            </outline>
          </outline>
          <outline text="sdbColumn {Object} 項目の構造情報(b9bea3e5ffc9)" _note="= 項目定義メタ情報(JSDoc)&#10;">
            <outline text="name {string} 項目名" />
            <outline text="type {string} データ型。string,number,boolean,Date,JSON,UUID" />
            <outline text="format {string} 表示形式。type=Dateの場合のみ指定" />
            <outline text="options {string} 取り得る選択肢(配列)のJSON表現" _note="ex. [&quot;未入場&quot;,&quot;既収&quot;,&quot;未収&quot;,&quot;無料&quot;]" />
            <outline text="default {function} 既定値を取得する関数。引数は当該行オブジェクト" _note="指定の際は必ず&lt;code&gt;{〜}&lt;/code&gt; で囲み、return文を付与のこと。&#10;ex.&lt;code&gt;o =&amp;gt; {return toLocale(new Date())}&lt;/code&gt; &#10;" />
            <outline text="primaryKey {boolean}=false 一意キー項目ならtrue" />
            <outline text="unique {boolean}=false primaryKey以外で一意な値を持つならtrue" />
            <outline text="auto_increment {bloolean|null|number|number[]}=false 自動採番項目" _note="null ⇒ 自動採番しない&#10;boolean ⇒ true:自動採番する(基数=1,増減値=1)、false:自動採番しない&#10;number ⇒ 自動採番する(基数=指定値,増減値=1)&#10;number[] ⇒ 自動採番する(基数=添字0,増減値=添字1)&#10;object ⇒ {start:m,step:n}形式" />
            <outline text="suffix {string} &quot;not null&quot;等、上記以外のSQLのcreate table文のフィールド制約" />
            <outline text="note {string} 本項目に関する備考" _note="ローカル側のcreate table等では使用しない" />
            <outline text="3 Backlinks">
              <outline text="typedefs {Object.&amp;lt;string, &lt;a href=&quot;https://workflowy.com/#/b9bea3e5ffc9&quot;&gt;sdbColumn&lt;/a&gt;[]&amp;gt;} オブジェクトの項目定義集" />
              <outline text="arg {&lt;a href=&quot;https://workflowy.com/#/b9bea3e5ffc9&quot;&gt;sdbColumn&lt;/a&gt;[]|string} 文字列の場合、sv.opt以下に定義されているメンバ(typedef)と看做す" />
              <outline text="objectizeColumn() : &lt;a href=&quot;https://workflowy.com/#/b9bea3e5ffc9&quot;&gt;項目定義メタ情報&lt;/a&gt;(JSDoc)からオブジェクトを生成" />
            </outline>
          </outline>
        </outline>
        <outline text="その他" _note="用語解説、注意事項、更新履歴、他">
          <outline text="【参考】SpreadDbのエラーコード" _note="| No | 設定項目 | コード | 発生箇所 | 原因 |&#10;| --: | :-- | :-- | :-- | :-- |&#10;| 1 | qSts | No Authority | doQuery | 指定されたテーブル操作の権限が無い |&#10;| 2 | qSts | No command | doQuery | query.commandが無い、または文字列では無い |&#10;| 3 | qSts | No Table name | doQuery | query.tableが無い、または文字列では無い |&#10;| 4 | qSts | Invalid where clause | doQuery | (権限&quot;o&quot;で)where句の値がプリミティブ型ではない |&#10;| 5 | qSts | No Table | doQuery&amp;lt;br&amp;gt;genTable | (create以外で)対象テーブルが無い |&#10;| 6 | qSts | No cols and data | genTable | createで項目定義も初期データも無い |&#10;| 7 | qSts | Already Exist | createTable | シートが既に存在している |&#10;| 8 | qSts | Duplicate | createTable | 初期レコード内に重複が存在 |&#10;| 9 | qSts | Empty set | createTable&amp;lt;br&amp;gt;appendRow | query.setが不在、または配列の長さが0 |&#10;| 10 | qSts | Invalid set | appendRow | query.setが非配列なのに要素がオブジェクトではない |&#10;| 11 | qSts | No set | appendRow&amp;lt;br&amp;gt;updateRow | queryにメンバ&quot;set&quot;が不在 |&#10;| 12 | qSts | No where | deleteRow&amp;lt;br&amp;gt;updateRow | where句がqueryに無い |&#10;| 13 | qSts | Undefined Column | updateRow | 更新対象項目がテーブルに無い |&#10;| 14 | qSts | その他 | doQuery | エラーオブジェクトのmessage |&#10;| 15 | rSts | Duplicate | appendRow&amp;lt;br&amp;gt;updateRow | unique項目に重複した値を入れようとした |&#10;| 16 | Error | Invalid Argument | functionalyze | 不適切な引数 |&#10;| 17 | Error | Could not Lock | main | 規定回数以上シートのロックに失敗した |" />
          <outline text="更新履歴" />
        </outline>
        <outline text="テスト仕様" />
      </outline>
      <outline text="SpreadDb 1.2.0(d4369fcf4044)" _note="&quot;SpreadDb&quot;はGoogle Spread上のシートを記憶領域とし、参照・更新・削除およびテーブル構造情報取得を実現するライブラリ。&#10;&#10;なおパラメータで利用者の権限とシート毎のアクセス権を付与することでアクセス制御を行えるようにする。&#10;">
        <outline text="主処理(922be86d118e)">
          <outline text="概要(3eca2504fb57)" _note="1. スプレッドシートを凍結&#10;1. queryで渡された操作要求を順次処理&#10;1. 権限確認後、command系内部関数の呼び出し&#10;1. command系関数内で結果をqueryに追記&#10;1. queryの配列を変更履歴シートに追記&#10;1. スプレッドシートの凍結解除" />
          <outline text="引数">
            <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;[]} 操作要求、またはその配列" />
            <outline text="opt {&lt;a href=&quot;https://workflowy.com/#/a4a26014ccb3&quot;&gt;sdbOption&lt;/a&gt;}={} 起動時オプション" />
          </outline>
          <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/b03c5ccd2f8f&quot;&gt;sdbMain&lt;/a&gt;[]}" _note="エラーコードについては「&lt;a href=&quot;https://workflowy.com/#/60cbb24d684c&quot;&gt;エラーの種類&lt;/a&gt;」参照" />
        </outline>
        <outline text="内部関数 - 非command系(a9f01a749b53)">
          <outline text="constructor() : 擬似メンバの値設定、変更履歴テーブルの準備(0f493fed5cc9)">
            <outline text="引数" _note="主処理と同じ。">
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;[]} 操作要求、またはその配列" />
              <outline text="opt {&lt;a href=&quot;https://workflowy.com/#/a4a26014ccb3&quot;&gt;sdbOption&lt;/a&gt;}={} 起動時オプション" />
            </outline>
            <outline text="戻り値 {null|Error}" />
          </outline>
          <outline text="convertRow() : シートイメージと行オブジェクトの相互変換(e65032ddce65)">
            <outline text="引数">
              <outline text="data {any[][]|Object[]} 行データ。シートイメージか行オブジェクトの配列" />
              <outline text="[header] {string[]}=[] - ヘッダ行。rowが行オブジェクトで項目の並びを指定したい場合に使用" />
            </outline>
            <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/01ee6b06c8a6&quot;&gt;sdbConvertRow&lt;/a&gt;}" />
          </outline>
          <outline text="doQuery() : 単体クエリの実行、変更履歴の作成">
            <outline text="引数">
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}" />
            </outline>
            <outline text="戻り値 {void}" />
          </outline>
          <outline text="functionalize() : オブジェクト・文字列を基にObject/stringを関数化(6d09e5d0363d)">
            <outline text="引数">
              <outline text="arg">
                <outline text="table {&lt;a href=&quot;https://workflowy.com/#/976403e08f0e&quot;&gt;sdbTable&lt;/a&gt;} 呼出元で処理対象としているテーブル" />
                <outline text="data {Object|function|string} 関数化するオブジェクトor文字列" _note="引数のデータ型により以下のように処理分岐&#10;&#10;- Object ⇒ {キー項目名:キー項目の値}形式で、key:valueに該当するレコードを更新&#10;- Function ⇒ 行オブジェクトを引数に対象ならtrueを返す関数で、trueが返されたレコードを更新&#10;- string&#10;  - 無名関数またはアロー関数のソース文字列 ⇒ new Functionで関数化&#10;  - その他 ⇒ 項目定義で&quot;primaryKey&quot;を指定した項目の値&#10;" />
              </outline>
            </outline>
            <outline text="戻り値 {function}" />
          </outline>
          <outline text="genColumn() : sdbColumnオブジェクトを生成(a8e56dd4e3c7)">
            <outline text="引数">
              <outline text="arg {string|&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;} シート上のメモの文字列またはsdbColumn" />
            </outline>
            <outline text="戻り値 {Object}">
              <outline text="column {&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;} 項目の定義情報" />
              <outline text="note {string} シート上のメモの文字列" />
            </outline>
          </outline>
          <outline text="genSchema() : sdbSchemaオブジェクトを生成(74c07b6144cd)">
            <outline text="引数">
              <outline text="arg {&lt;a href=&quot;https://workflowy.com/#/976403e08f0e&quot;&gt;sdbTable&lt;/a&gt;}" />
            </outline>
            <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/2609271977a8&quot;&gt;sdbGenSchema&lt;/a&gt;}" />
          </outline>
          <outline text="genTable() : sdbTableオブジェクトを生成(f783913fe275)">
            <outline text="引数">
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}" _note="sdbQueryの内、必要なのは以下のメンバ&#10;">
                <outline text="table {string} テーブル名" />
                <outline text="[cols] {&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;[]} - 新規作成シートの項目定義オブジェクトの配列" />
                <outline text="[set] {Object[]|Array[]} - 新規作成シートに書き込む初期値" _note="行オブジェクトの配列、またはシートイメージ(プリミティブ型二次元配列)&#10;" />
                <outline text="qSts {string} クエリ単位の実行結果" />
              </outline>
              <outline text="arg {Object}">
                <outline text="name {string} - テーブル名" />
                <outline text="[cols] {&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;[]} - 新規作成シートの項目定義オブジェクトの配列" />
                <outline text="[values] {Object[]|Array[]} - 新規作成シートに書き込む初期値" _note="行オブジェクトの配列、またはシートイメージ(プリミティブ型二次元配列)&#10;" />
              </outline>
            </outline>
            <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/976403e08f0e&quot;&gt;sdbTable&lt;/a&gt;}" />
          </outline>
          <outline text="objectizeColumn() : 項目定義メタ情報(JSDoc)からオブジェクトを生成" />
          <outline text="toString() : 関数・オブジェクトを文字列化" />
        </outline>
        <outline text="内部関数 - command系(250e0f646160)">
          <outline text="appendRow() : テーブルに新規行を追加(288276ee622d)">
            <outline text="引数">
              <outline text="arg {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}" _note="sdbQueryの内、必要なのは以下のメンバ">
                <outline text="table {string} 操作対象テーブル名" />
                <outline text="&lt;a href=&quot;https://workflowy.com/#/58dde3944536&quot;&gt;set&lt;/a&gt; {Object|Object[]} 追加する行オブジェクト" />
                <outline text="result {&lt;a href=&quot;https://workflowy.com/#/d2f620e47c51&quot;&gt;sdbResult&lt;/a&gt;} レコード単位に追加結果を格納" />
              </outline>
            </outline>
            <outline text="戻り値 {null|Error}" />
            <outline text="エラーコード" _note="- Duplicate: unique項目に重複した値を設定。diffに&lt;code&gt;{項目名:重複値}&lt;/code&gt; 形式で記録" />
          </outline>
          <outline text="createTable() : データから新規テーブルを生成(77304ebfbc33)" _note="管理者のみ実行可。初期データが有った場合、件数を変更履歴シートafter欄に記載">
            <outline text="引数 {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}" />
            <outline text="戻り値 {null|Error}" />
          </outline>
          <outline text="deleteRow() : テーブルから条件に合致する行を削除(30d4aa5c9fd7)">
            <outline text="引数">
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}">
                <outline text="table {string} 操作対象のテーブル名" />
                <outline text="&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;where&lt;/a&gt; {Object|Function|string} 対象レコードの判定条件" />
              </outline>
            </outline>
            <outline text="戻り値 {null|Error}" />
          </outline>
          <outline text="getSchema() : 指定されたテーブルの構造情報を取得(701a78c34e0a)">
            <outline text="引数">
              <outline text="arg {string|string[]} 取得対象テーブル名" />
            </outline>
            <outline text="戻り値 {Object.&amp;lt;string,&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;[]&amp;gt;} {テーブル名：項目定義オブジェクトの配列}形式(f76eb797d345)">
              <outline text="1 Backlink">
                <outline text="syncTable() : authServer(SpreadDb.getSchema)の&lt;a href=&quot;https://workflowy.com/#/f76eb797d345&quot;&gt;戻り値&lt;/a&gt;を基にローカルDBにテーブルを作成、同期する" />
              </outline>
            </outline>
            <outline text="変更履歴シートへの記録" />
          </outline>
          <outline text="selectRow() : テーブルから条件に合致する行を抽出(a8ac2d5e7372)">
            <outline text="引数">
              <outline text="arg {Object|Object[]}">
                <outline text="table {&lt;a href=&quot;https://workflowy.com/#/976403e08f0e&quot;&gt;sdbTable&lt;/a&gt;} 操作対象のテーブル管理情報" />
                <outline text="&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;where&lt;/a&gt; {Object|Function|string} 対象レコードの判定条件" />
              </outline>
            </outline>
            <outline text="戻り値 {Object[]} 該当行オブジェクトの配列" />
          </outline>
          <outline text="updateRow() : テーブルを更新(206036f40579)">
            <outline text="引数">
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}" _note="同一テーブルでも複数の条件で更新する場合、SpreadDb.arg.query自体を別オブジェクトで用意する">
                <outline text="table {string} 操作対象のテーブル名" />
                <outline text="&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;where&lt;/a&gt; {Object|Function|string} 対象レコードの判定条件" />
                <outline text="&lt;a href=&quot;https://workflowy.com/#/58dde3944536&quot;&gt;set&lt;/a&gt; {Object|string|Function} 更新する値" />
              </outline>
            </outline>
            <outline text="戻り値 {null|Error}" />
          </outline>
        </outline>
        <outline text="typedefs(5a75202c3db4)">
          <outline text="擬似メンバ&quot;pv&quot;(fa77053faee2)" _note="pv = private variables">
            <outline text="whois {string} 'SpreadDb'固定" />
            <outline text="rv {sdbMain[]} 戻り値。クエリ毎の実行結果の配列" />
            <outline text="log {sdbLog[]} 変更履歴シートへの追記イメージ" />
            <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;[]} 処理要求" />
            <outline text="opt {&lt;a href=&quot;https://workflowy.com/#/a4a26014ccb3&quot;&gt;sdbOption&lt;/a&gt;} 起動時オプション" />
            <outline text="spread {&lt;a href=&quot;https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet?hl=ja&quot;&gt;Spread&lt;/a&gt;} スプレッドシートオブジェクト" />
            <outline text="table {Object.&amp;lt;string,&lt;a href=&quot;https://workflowy.com/#/976403e08f0e&quot;&gt;sdbTable&lt;/a&gt;&amp;gt;} スプレッドシート上の各テーブル(領域)の情報" />
          </outline>
          <outline text="sdbQuery {Object[]} 操作要求の内容(1e80990a7c63)" _note="■：引数で渡される項目、□：主処理でcommand系メソッド呼出前に設定される項目、〇：command系メソッドで設定される項目&#10;">
            <outline text="□timestamp {string}=toLocale(new Date()) 更新日時(ISO8601拡張形式)">
              <outline text="1 Backlink">
                <outline text="&lt;a href=&quot;https://workflowy.com/#/bf9d7d1a97d2&quot;&gt;timestamp&lt;/a&gt; {string} 更新日時(ISO8601拡張形式)" />
              </outline>
            </outline>
            <outline text="□userId {string|number}=&lt;a href=&quot;https://workflowy.com/#/5554e1d6a61d&quot;&gt;opt.userId&lt;/a&gt; ユーザ識別子(uuid等)" />
            <outline text="■[queryId] {string} SpreadDb呼出元で設定する、クエリ・結果突合用文字列" _note="未設定の場合は主処理でUUIDを設定">
              <outline text="1 Backlink">
                <outline text="&lt;a href=&quot;https://workflowy.com/#/e0188bfade27&quot;&gt;queryId&lt;/a&gt; {string} SpreadDb呼出元で設定する、クエリ・結果突合用文字列" _note="未設定の場合は主処理でUUIDを設定" />
              </outline>
            </outline>
            <outline text="■table {string} 操作対象テーブル名" _note="全commandで使用&#10;">
              <outline text="1 Backlink">
                <outline text="&lt;a href=&quot;https://workflowy.com/#/cd1ba8419dfc&quot;&gt;table&lt;/a&gt; {string|string[]} 操作対象テーブル名" _note="全commandで使用。command='schema'の場合、取得対象テーブル名またはその配列&#10;" />
              </outline>
            </outline>
            <outline text="■command {string} 操作名" _note="全commandで使用。「&lt;a href=&quot;https://workflowy.com/#/0055bda95f77&quot;&gt;commandの種類とrwdos文字列によるアクセス制御&lt;/a&gt;」参照" />
            <outline text="■[cols] {&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;[]} 新規作成シートの項目定義オブジェクトの配列" _note="command='create'のみで使用" />
            <outline text="■[&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;where&lt;/a&gt;] {Object|Function|string} 対象レコードの判定条件" _note="command='select','update','delete'で使用" />
            <outline text="■[&lt;a href=&quot;https://workflowy.com/#/58dde3944536&quot;&gt;set&lt;/a&gt;] {Object|Object[]|string|string[]|Function} 追加・更新する値" _note="command='create','update','append'で使用" />
            <outline text="〇arg {string} 操作関数に渡された引数(データ)" _note="createならcols、select/update/deleteならwhere、append/schemaなら空白。&#10;create/appendの追加レコード情報、selectの抽出レコード等はrecordで確認する運用を想定&#10;" />
            <outline text="□qSts {string} クエリ単位の実行結果" _note="正常終了なら&quot;OK&quot;。エラーコードは&lt;a href=&quot;https://workflowy.com/#/60cbb24d684c&quot;&gt;エラーの種類&lt;/a&gt;参照。">
              <outline text="1 Backlink">
                <outline text="&lt;a href=&quot;https://workflowy.com/#/a0484ae4e8cb&quot;&gt;qSt&lt;/a&gt;s {string} クエリ単位の実行結果" />
              </outline>
            </outline>
            <outline text="〇num {number} 変更された行数" _note="create: 初期値の行数、append:追加行数、update:変更行数、delete:削除行数、select:抽出行数、schema:0(固定)&#10;" />
            <outline text="〇result {&lt;a href=&quot;https://workflowy.com/#/d2f620e47c51&quot;&gt;sdbResult&lt;/a&gt;[]} レコード単位の実行結果" />
            <outline text="10 Backlinks">
              <outline text="authQuery {Object[]} 操作要求の内容(accf9448cecc)" _note="- ■：authClientへの引数、□：authServerへの引数(authClientでの追加項目)、〇：authServerでの追加項目&#10;- SpreadDbの&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;からの差分項目&#10;  - 削除項目：cols, arg&#10;  - 追加項目：email, CPkey, passcode, SPkey, status&#10;- command=&quot;delete&quot;(物理削除)は使用不可とし、論理削除で対応&amp;lt;br&amp;gt;(万一のハッキング時のリスク軽減)&#10;" />
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;[]} 操作要求、またはその配列" />
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}" _note="同一テーブルでも複数の条件で更新する場合、SpreadDb.arg.query自体を別オブジェクトで用意する" />
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}" />
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}" _note="sdbQueryの内、必要なのは以下のメンバ&#10;" />
              <outline text="arg {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}" _note="sdbQueryの内、必要なのは以下のメンバ" />
              <outline text="引数 {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}" />
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;}" />
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;[]} 処理要求" />
              <outline text="query {&lt;a href=&quot;https://workflowy.com/#/1e80990a7c63&quot;&gt;sdbQuery&lt;/a&gt;[]} 操作要求、またはその配列" />
            </outline>
          </outline>
          <outline text="sdbTable {Object} テーブルの管理情報(976403e08f0e)">
            <outline text="name {string} テーブル名(範囲名)" />
            <outline text="account {string} 更新者のアカウント(識別子)" />
            <outline text="sheet {&lt;a href=&quot;https://developers.google.com/apps-script/reference/spreadsheet/sheet?hl=ja&quot;&gt;Sheet&lt;/a&gt;} スプレッドシート内の操作対象シート(ex.&quot;master&quot;シート)" />
            <outline text="schema {&lt;a href=&quot;https://workflowy.com/#/7b012b226f8e&quot;&gt;sdbSchema&lt;/a&gt;} シートの項目定義" />
            <outline text="values {Object[]} 行オブジェクトの配列。&lt;code&gt;{項目名:値,..}&lt;/code&gt; 形式" />
            <outline text="header {string[]} 項目名一覧(ヘッダ行)" />
            <outline text="notes {string[]} ヘッダ行のメモ" />
            <outline text="colnum {number} データ領域の列数" />
            <outline text="rownum {number} データ領域の行数(ヘッダ行は含まず)" />
            <outline text="5 Backlinks">
              <outline text="arg {&lt;a href=&quot;https://workflowy.com/#/976403e08f0e&quot;&gt;sdbTable&lt;/a&gt;}" />
              <outline text="table {&lt;a href=&quot;https://workflowy.com/#/976403e08f0e&quot;&gt;sdbTable&lt;/a&gt;} 操作対象のテーブル管理情報" />
              <outline text="table {&lt;a href=&quot;https://workflowy.com/#/976403e08f0e&quot;&gt;sdbTable&lt;/a&gt;} 呼出元で処理対象としているテーブル" />
              <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/976403e08f0e&quot;&gt;sdbTable&lt;/a&gt;}" />
              <outline text="table {Object.&amp;lt;string,&lt;a href=&quot;https://workflowy.com/#/976403e08f0e&quot;&gt;sdbTable&lt;/a&gt;&amp;gt;} スプレッドシート上の各テーブル(領域)の情報" />
            </outline>
          </outline>
          <outline text="sdbSchema {Object} テーブルの構造情報(7b012b226f8e)">
            <outline text="cols {&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;[]} 項目定義オブジェクトの配列" />
            <outline text="primaryKey {string}='id' 一意キー項目名" />
            <outline text="unique {Object.&amp;lt;string, any[]&amp;gt;} primaryKeyおよびunique属性項目の管理情報" _note="メンバ名はprimaryKey/uniqueの項目名&#10;" />
            <outline text="auto_increment {Object.&amp;lt;string,Object&amp;gt;} auto_increment属性項目の管理情報" _note="メンバ名はauto_incrementの項目名&#10;">
              <outline text="start {number} 開始値" />
              <outline text="step {number} 増減値" />
              <outline text="current {number} 現在の最大(小)値" _note="currentはsdbTableインスタンスで操作する。" />
            </outline>
            <outline text="defaultRow {Object.&amp;lt;string,function&amp;gt;} 項目名：既定値算式で構成されたオブジェクト。appendの際のプロトタイプ" />
            <outline text="1 Backlink">
              <outline text="schema {&lt;a href=&quot;https://workflowy.com/#/7b012b226f8e&quot;&gt;sdbSchema&lt;/a&gt;} シートの項目定義" />
            </outline>
          </outline>
          <outline text="sdbColumn {Object} 項目の構造情報(df5b3c98954e)" _note="= シート上のメモの文字列">
            <outline text="name {string} 項目名" />
            <outline text="type {string} データ型。string,number,boolean,Date,JSON,UUID" />
            <outline text="format {string} 表示形式。type=Dateの場合のみ指定" />
            <outline text="options {string} 取り得る選択肢(配列)のJSON表現" _note="ex. [&quot;未入場&quot;,&quot;既収&quot;,&quot;未収&quot;,&quot;無料&quot;]" />
            <outline text="default {function} 既定値を取得する関数。引数は当該行オブジェクト" _note="指定の際は必ず&lt;code&gt;{〜}&lt;/code&gt; で囲み、return文を付与のこと。&#10;ex.&lt;code&gt;o =&amp;gt; {return toLocale(new Date())}&lt;/code&gt; &#10;" />
            <outline text="primaryKey {boolean}=false 一意キー項目ならtrue" />
            <outline text="unique {boolean}=false primaryKey以外で一意な値を持つならtrue" />
            <outline text="auto_increment {bloolean|null|number|number[]}=false 自動採番項目" _note="null ⇒ 自動採番しない&#10;boolean ⇒ true:自動採番する(基数=1,増減値=1)、false:自動採番しない&#10;number ⇒ 自動採番する(基数=指定値,増減値=1)&#10;number[] ⇒ 自動採番する(基数=添字0,増減値=添字1)&#10;object ⇒ {start:m,step:n}形式" />
            <outline text="suffix {string} &quot;not null&quot;等、上記以外のSQLのcreate table文のフィールド制約" />
            <outline text="note {string} 本項目に関する備考" _note="ローカル側のcreate table等では使用しない" />
            <outline text="8 Backlinks">
              <outline text="[cols] {&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;[]} - 新規作成シートの項目定義オブジェクトの配列" />
              <outline text="sdbLog {Object} 変更履歴オブジェクト(dab8cfcec9d8)" _note="| command | 権限 | status | ratio | record欄 | 備考 |&#10;| :-- | :--: | :-- | :-- | :-- | :-- |&#10;| create | — | Already Exist&amp;lt;br&amp;gt;No Cols and Data | — | &lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt; | 管理者のみ実行可 |&#10;| select | r | No Table | 抽出失敗/対象 | — | 「対象なのに失敗」は考慮しない |&#10;| update | rw | No Table | 更新失敗/対象 | {sts:[OK|Duplicate],diff:{項目名:[更新前,更新後]}} |  |&#10;| append | w | No Table | 追加失敗/対象 | {sts:[OK|Duplicate],diff:追加行Obj} |  |&#10;| delete | d | No Table | 削除失敗/対象 | — | 「対象なのに失敗」は考慮しない |&#10;| schema | s | No Table | — | &lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt; |  |&#10;&#10;- command系メソッドはstatus,num,recordを返す&#10;- command系メソッドは、成功件数が0件でも「正常終了」とし、status=&quot;OK&quot;とする&#10;- 戻り値がErrorオブジェクトの場合、status=&quot;System&quot;,record=Error.messageとする&#10;- record欄は、実際は上記Objの【配列】のJSON文字列とする&#10;&#10;以下、既定値は&lt;a href=&quot;https://workflowy.com/#/6fb9aba6d9f9&quot;&gt;genLog()&lt;/a&gt;で設定される値&#10;" />
              <outline text="戻り値 {Object.&amp;lt;string,&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;[]&amp;gt;} {テーブル名：項目定義オブジェクトの配列}形式(f76eb797d345)" />
              <outline text="column {&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;} 項目の定義情報" />
              <outline text="arg {string|&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;} シート上のメモの文字列またはsdbColumn" />
              <outline text="[cols] {&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;[]} - 新規作成シートの項目定義オブジェクトの配列" />
              <outline text="■[cols] {&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;[]} 新規作成シートの項目定義オブジェクトの配列" _note="command='create'のみで使用" />
              <outline text="cols {&lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt;[]} 項目定義オブジェクトの配列" />
            </outline>
          </outline>
          <outline text="sdbLog {Object} 変更履歴オブジェクト(dab8cfcec9d8)" _note="| command | 権限 | status | ratio | record欄 | 備考 |&#10;| :-- | :--: | :-- | :-- | :-- | :-- |&#10;| create | — | Already Exist&amp;lt;br&amp;gt;No Cols and Data | — | &lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt; | 管理者のみ実行可 |&#10;| select | r | No Table | 抽出失敗/対象 | — | 「対象なのに失敗」は考慮しない |&#10;| update | rw | No Table | 更新失敗/対象 | {sts:[OK|Duplicate],diff:{項目名:[更新前,更新後]}} |  |&#10;| append | w | No Table | 追加失敗/対象 | {sts:[OK|Duplicate],diff:追加行Obj} |  |&#10;| delete | d | No Table | 削除失敗/対象 | — | 「対象なのに失敗」は考慮しない |&#10;| schema | s | No Table | — | &lt;a href=&quot;https://workflowy.com/#/df5b3c98954e&quot;&gt;sdbColumn&lt;/a&gt; |  |&#10;&#10;- command系メソッドはstatus,num,recordを返す&#10;- command系メソッドは、成功件数が0件でも「正常終了」とし、status=&quot;OK&quot;とする&#10;- 戻り値がErrorオブジェクトの場合、status=&quot;System&quot;,record=Error.messageとする&#10;- record欄は、実際は上記Objの【配列】のJSON文字列とする&#10;&#10;以下、既定値は&lt;a href=&quot;https://workflowy.com/#/6fb9aba6d9f9&quot;&gt;genLog()&lt;/a&gt;で設定される値&#10;">
            <outline text="logId {string}=Utilities.getUuid() 変更履歴レコードの識別子" _note="primaryKey, default:UUID" />
            <outline text="timestamp {string}=toLocale(new Date()) 更新日時(ISO8601拡張形式)" />
            <outline text="userId {string}=&lt;a href=&quot;https://workflowy.com/#/5554e1d6a61d&quot;&gt;opt.userId&lt;/a&gt; ユーザ識別子(uuid等)" />
            <outline text="queryId {string}=null SpreadDb呼出元で設定する、クエリ・結果突合用文字列" _note="未設定の場合、メソッド呼び出し前にgenLogでUUIDを設定&#10;" />
            <outline text="table {string}=null 対象テーブル名" />
            <outline text="command {string}=null 操作内容(コマンド名)" _note="設定内容は「&lt;a href=&quot;https://workflowy.com/#/0055bda95f77&quot;&gt;commandの種類とrwdos文字列によるアクセス制御&lt;/a&gt;」参照" />
            <outline text="[&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;data&lt;/a&gt;] {Object|Function|string} 操作関数に渡された引数(データ)" _note="createならcols、select/update/deleteならwhere、append/schemaなら空白。&#10;create/appendの追加レコード情報、selectの抽出レコード等はrecordで確認する運用を想定&#10;" />
            <outline text="&lt;a href=&quot;https://workflowy.com/#/a0484ae4e8cb&quot;&gt;qSt&lt;/a&gt;s {string} クエリ単位の実行結果" />
            <outline text="num {number} 変更された行数" _note="create: 初期値の行数、append:追加行数、update:変更行数、delete:削除行数、select:抽出行数、schema:0(固定)&#10;" />
            <outline text="&lt;a href=&quot;https://workflowy.com/#/6d2c404bdbd8&quot;&gt;pKey&lt;/a&gt; {string} 変更したレコードのprimaryKey" />
            <outline text="rSts {string} レコード単位でのエラーコード" />
            <outline text="diff {Object} 当該レコードの変更点" />
            <outline text="1 Backlink">
              <outline text="log - SpreadDbのアクセスログシート" _note="詳細はSpreadDb.&lt;a href=&quot;https://workflowy.com/#/dab8cfcec9d8&quot;&gt;sdbLog&lt;/a&gt;参照" />
            </outline>
          </outline>
          <outline text="sdbOption {Object} オプション(a4a26014ccb3)">
            <outline text="userId {string}='guest' ユーザの識別子" _note="指定する場合、必ずuserAuthも併せて指定">
              <outline text="2 Backlinks">
                <outline text="□userId {string|number}=&lt;a href=&quot;https://workflowy.com/#/5554e1d6a61d&quot;&gt;opt.userId&lt;/a&gt; ユーザ識別子(uuid等)" />
                <outline text="userId {string}=&lt;a href=&quot;https://workflowy.com/#/5554e1d6a61d&quot;&gt;opt.userId&lt;/a&gt; ユーザ識別子(uuid等)" />
              </outline>
            </outline>
            <outline text="userAuth {Object.&amp;lt;string,string&amp;gt;}={} テーブル毎のアクセス権限。&lt;code&gt;{シート名:rwdos文字列}&lt;/code&gt; 形式" _note="r:select(read), w:write, d:delete, s:schema, o:own only(指定シートのprimaryKeyがuserIdと一致するレコードのみ参照・変更可。削除不可)。追加はwがあれば可&#10;&#10;o(own record only)の指定は他の'rwdos'に優先、'o'のみの指定と看做す(rwds指定は有っても無視)。&#10;また検索対象テーブルはprimaryKey要設定、検索条件もprimaryKeyの値のみ指定可&#10;read/writeは自分のみ可、delete/schemaは実行不可&#10;" />
            <outline text="log {string}='log' 変更履歴テーブル名" _note="nullの場合、ログ出力は行わない。領域名 &amp;gt; A1記法 &amp;gt; シート名の順に解釈" />
            <outline text="maxTrial {number}=5 テーブル更新時、ロックされていた場合の最大試行回数" />
            <outline text="interval {number}=10000 テーブル更新時、ロックされていた場合の試行間隔(ミリ秒)" />
            <outline text="guestAuth {Object.&amp;lt;string,string&amp;gt;}={} ゲストに付与する権限。&lt;code&gt;{シート名:rwdos文字列}&lt;/code&gt; 形式" />
            <outline text="adminId {string}='Administrator' 管理者として扱うuserId" _note="管理者は全てのシートの全権限を持つ&#10;" />
            <outline text="additionalPrimaryKey {Object} createTableで主キー無指定時に追加設定される主キー項目名" _note="既定値は`{name:'rowId',type:'UUID',note:'主キー',primaryKey:true,default:()=&amp;gt;Utilities.getUuid()}`&#10;" />
            <outline text="案：system {string[]} システム用シート名" _note="メモの修正による項目定義の変更を行うことが不適切なシートは「システム用シート」として、起動時引数での指定を可能にする。&#10;" />
            <outline text="4 Backlinks">
              <outline text="sdbOption {&lt;a href=&quot;https://workflowy.com/#/a4a26014ccb3&quot;&gt;sdbOption&lt;/a&gt;} SpreadDbのオプション" />
              <outline text="opt {&lt;a href=&quot;https://workflowy.com/#/a4a26014ccb3&quot;&gt;sdbOption&lt;/a&gt;}={} 起動時オプション" />
              <outline text="opt {&lt;a href=&quot;https://workflowy.com/#/a4a26014ccb3&quot;&gt;sdbOption&lt;/a&gt;}={} 起動時オプション" />
              <outline text="opt {&lt;a href=&quot;https://workflowy.com/#/a4a26014ccb3&quot;&gt;sdbOption&lt;/a&gt;} 起動時オプション" />
            </outline>
          </outline>
          <outline text="sdbResult {Object} レコード単位の実行結果(d2f620e47c51)">
            <outline text="pKey {string} 処理対象レコードの識別子">
              <outline text="1 Backlink">
                <outline text="&lt;a href=&quot;https://workflowy.com/#/6d2c404bdbd8&quot;&gt;pKey&lt;/a&gt; {string} 変更したレコードのprimaryKey" />
              </outline>
            </outline>
            <outline text="rSts {string}='OK' レコード単位での実行結果" _note="append/updateで重複エラー時は&quot;Duplicate&quot;&#10;" />
            <outline text="diff {Object} 当該レコードの変更点" _note="create : 初期値として追加した行オブジェクト&#10;select : 抽出された行オブジェクト&#10;append : 追加された行オブジェクト。Duplicateエラーの場合、重複項目と値&#10;update : 変更点。{変更された項目名:[変更前,変更後]}&#10;delete : 削除された行オブジェクト&#10;schema : 提供された項目定義(sdbColumn[])&#10;" />
            <outline text="4 Backlinks">
              <outline text="〇result {&lt;a href=&quot;https://workflowy.com/#/d2f620e47c51&quot;&gt;sdbResult&lt;/a&gt;[]} レコード単位の実行結果" />
              <outline text="result {&lt;a href=&quot;https://workflowy.com/#/d2f620e47c51&quot;&gt;sdbResult&lt;/a&gt;[]} レコード単位の実行結果" />
              <outline text="result {&lt;a href=&quot;https://workflowy.com/#/d2f620e47c51&quot;&gt;sdbResult&lt;/a&gt;} レコード単位に追加結果を格納" />
              <outline text="〇result {&lt;a href=&quot;https://workflowy.com/#/d2f620e47c51&quot;&gt;sdbResult&lt;/a&gt;[]} レコード単位の実行結果" />
            </outline>
          </outline>
          <outline text="sdbMain {Object} 主処理(=SpreadDb)の実行結果オブジェクト(b03c5ccd2f8f)">
            <outline text="1 Backlink">
              <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/b03c5ccd2f8f&quot;&gt;sdbMain&lt;/a&gt;[]}" _note="エラーコードについては「&lt;a href=&quot;https://workflowy.com/#/60cbb24d684c&quot;&gt;エラーの種類&lt;/a&gt;」参照" />
            </outline>
            <outline text="&lt;a href=&quot;https://workflowy.com/#/bf9d7d1a97d2&quot;&gt;timestamp&lt;/a&gt; {string} 更新日時(ISO8601拡張形式)" />
            <outline text="&lt;a href=&quot;https://workflowy.com/#/e0188bfade27&quot;&gt;queryId&lt;/a&gt; {string} SpreadDb呼出元で設定する、クエリ・結果突合用文字列" _note="未設定の場合は主処理でUUIDを設定" />
            <outline text="&lt;a href=&quot;https://workflowy.com/#/cd1ba8419dfc&quot;&gt;table&lt;/a&gt; {string|string[]} 操作対象テーブル名" _note="全commandで使用。command='schema'の場合、取得対象テーブル名またはその配列&#10;" />
            <outline text="command {string} 操作名" _note="全commandで使用。「&lt;a href=&quot;https://workflowy.com/#/0055bda95f77&quot;&gt;commandの種類とrwdos文字列によるアクセス制御&lt;/a&gt;」参照" />
            <outline text="[&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;data&lt;/a&gt;] {Object|Function|string} 操作関数に渡された引数(データ)" _note="createならcols、select/update/deleteならwhere、append/schemaなら空白。&#10;create/appendの追加レコード情報、selectの抽出レコード等はrecordで確認する運用を想定&#10;" />
            <outline text="qSts {string} クエリ単位の実行結果" _note="正常終了なら&quot;OK&quot;。エラーコードは&lt;a href=&quot;https://workflowy.com/#/60cbb24d684c&quot;&gt;エラーの種類&lt;/a&gt;参照" />
            <outline text="num {number} 変更された行数" _note="create: 初期値の行数、append:追加行数、update:変更行数、delete:削除行数、select:抽出行数、schema:0(固定)&#10;" />
            <outline text="result {&lt;a href=&quot;https://workflowy.com/#/d2f620e47c51&quot;&gt;sdbResult&lt;/a&gt;[]} レコード単位の実行結果" />
          </outline>
        </outline>
        <outline text="variables(235f8a9e77af)" _note="複数属性が定義され、内容によって意味が変わる変数の解説">
          <outline text="where {Object|Function|string} 対象レコードの判定条件(741ee9383b92)" _note="- Object ⇒ {キー項目名:キー項目の値}形式で、key:valueに該当するレコードを更新&#10;- function ⇒ 行オブジェクトを引数に対象ならtrueを返す関数で、trueが返されたレコードを更新&#10;- string&#10;  - 無名関数またはアロー関数のソース文字列 ⇒ new Functionで関数化。&lt;code&gt;{〜}&lt;/code&gt; で囲みreturn文を付与。&#10;  - その他 ⇒ 項目定義で&quot;primaryKey&quot;を指定した項目の値&#10;- その他(Object,function,string以外) ⇒ 項目定義で&quot;primaryKey&quot;を指定した項目の値&#10;">
            <outline text="6 Backlinks">
              <outline text="[&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;data&lt;/a&gt;] {Object|Function|string} 操作関数に渡された引数(データ)" _note="createならcols、select/update/deleteならwhere、append/schemaなら空白。&#10;create/appendの追加レコード情報、selectの抽出レコード等はrecordで確認する運用を想定&#10;" />
              <outline text="[&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;data&lt;/a&gt;] {Object|Function|string} 操作関数に渡された引数(データ)" _note="createならcols、select/update/deleteならwhere、append/schemaなら空白。&#10;create/appendの追加レコード情報、selectの抽出レコード等はrecordで確認する運用を想定&#10;" />
              <outline text="&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;where&lt;/a&gt; {Object|Function|string} 対象レコードの判定条件" />
              <outline text="&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;where&lt;/a&gt; {Object|Function|string} 対象レコードの判定条件" />
              <outline text="&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;where&lt;/a&gt; {Object|Function|string} 対象レコードの判定条件" />
              <outline text="■[&lt;a href=&quot;https://workflowy.com/#/741ee9383b92&quot;&gt;where&lt;/a&gt;] {Object|Function|string} 対象レコードの判定条件" _note="command='select','update','delete'で使用" />
            </outline>
          </outline>
          <outline text="set {Object|Object[]|string|Function} 更新する値(58dde3944536)" _note="set句の指定方法&#10;- Object ⇒ create/appendなら行オブジェクト、updateなら{更新対象項目名:セットする値}&#10;- string ⇒ 上記Objectに変換可能なJSON文字列&#10;- Function ⇒ 行オブジェクトを引数に、上記Objectを返す関数&#10;  【例】abc欄にfuga+hogeの値をセットする : {func: o=&amp;gt;{return {abc:(o.fuga||0)+(o.hoge||0)}}}&#10;">
            <outline text="3 Backlinks">
              <outline text="&lt;a href=&quot;https://workflowy.com/#/58dde3944536&quot;&gt;set&lt;/a&gt; {Object|Object[]} 追加する行オブジェクト" />
              <outline text="&lt;a href=&quot;https://workflowy.com/#/58dde3944536&quot;&gt;set&lt;/a&gt; {Object|string|Function} 更新する値" />
              <outline text="■[&lt;a href=&quot;https://workflowy.com/#/58dde3944536&quot;&gt;set&lt;/a&gt;] {Object|Object[]|string|string[]|Function} 追加・更新する値" _note="command='create','update','append'で使用" />
            </outline>
          </outline>
        </outline>
        <outline text="用語解説、注意事項(56eaf36cc785)">
          <outline text="関数での抽出条件・値の指定時の制約(2df536ff0f8d)" _note="default(sdbColumn), where, record(update他)では関数での指定を可能にしている。&#10;これらをセル・メモで保存する場合、文字列に変換する必要があるが、以下のルールで対応する。&#10;&#10;- 引数は行オブジェクトのみ(引数は必ず一つ)&#10;- 関数に復元する場合`new Function('o',[ロジック部分文字列])`で関数化&#10;  - 必ず&quot;{〜}&quot;で囲み、return文を付ける&#10;- コメントは`//〜`または`/*〜*/`で指定。無指定の場合、前行の続きと看做す&#10;- 関数は一行で記述する(複数行は不可)" />
          <outline text="commandの種類とrwdos文字列によるアクセス制御(0055bda95f77)" _note="commandの種類は下表の通り。&#10;&quot;rwdos&quot;とは&quot;Read/Write/Delete/Own/Schema&quot;の頭文字。管理者のみ実行可能な&quot;c&quot;(createTable)と特殊権限&quot;o&quot;を加えてシート毎のアクセス制御を行う。&#10;&#10;内容 | command | rwdos&#10;:-- | :-- | :-- &#10;テーブル生成 | create | c&#10;参照 | select | r&#10;更新 | update | rw&#10;追加 | append/insert | w&#10;削除 | delete | d&#10;テーブル管理情報取得 | schema | s&#10;">
            <outline text="3 Backlinks">
              <outline text="command {string} 操作名" _note="全commandで使用。「&lt;a href=&quot;https://workflowy.com/#/0055bda95f77&quot;&gt;commandの種類とrwdos文字列によるアクセス制御&lt;/a&gt;」参照" />
              <outline text="■command {string} 操作名" _note="全commandで使用。「&lt;a href=&quot;https://workflowy.com/#/0055bda95f77&quot;&gt;commandの種類とrwdos文字列によるアクセス制御&lt;/a&gt;」参照" />
              <outline text="command {string}=null 操作内容(コマンド名)" _note="設定内容は「&lt;a href=&quot;https://workflowy.com/#/0055bda95f77&quot;&gt;commandの種類とrwdos文字列によるアクセス制御&lt;/a&gt;」参照" />
            </outline>
          </outline>
          <outline text="特殊権限'o'" _note="イベント申込情報等、本人以外の参照・更新を抑止するためのアクセス権限。&#10;&#10;- 自分のread/write(select,update)およびschemaのみ実行可。append/deleteは実行不可&amp;lt;br&amp;gt;&#10;  ∵新規登録(append)はシステム管理者の判断が必要。また誤ってdeleteした場合はappendが必要なのでこれも不可&#10;- o(=own set only)の指定は他の'rwdos'に優先、'o'のみの指定と看做す(rwds指定は有っても無視)。&#10;- 対象テーブルはユーザ識別子項目をprimaryKeyとして要設定&#10;- 検索条件(where句)もprimaryKeyの値のみ指定可(Object,function,JSON他は不可)&#10;&#10;【旧仕様】&#10;- `userAuth:{シート名:o}`が指定された場合、当該シートのprimaryKey=userIdとなっているレコードのみ'r','w'可と看做す。&#10;- 'o'指定でselect/updateする場合、where句は無視され自情報に対する処理要求と看做す&#10;  ex. userId=2の人がuserId=1の人の氏名の更新を要求 ⇒ userId=2の氏名が更新される&#10;  ```&#10;  SpreadDb(&#10;    {table:'camp2024',command:'update',where:1,record:{'申込者氏名':'テスト'}},&#10;    {userId:2,userAuth:{camp2024:'o'}}&#10;  ); // -&amp;gt; userId=2の氏名が「テスト」に&#10;  ```&#10;" />
          <outline text="クエリのエラーとレコードのエラー" _note="- クエリのエラー&#10;  - 指定テーブルへのアクセス権が無い等、クエリ単位で発生するエラー&#10;  - &#10;  - command系メソッド内で予期せぬエラーが発生した場合(=戻り値がErrorオブジェクト)も該当&amp;lt;br&amp;gt;この場合、エラーコードにはError.messageがセットされる&#10;  - 主処理で判定&#10;  - SpreadDbの戻り値オブジェクトのErrCDに設定(sdbMain.ErrCD)&#10;  - エラーの種類&#10;    - No PrimaryKey: 権限&quot;o&quot;でappend先のテーブルに主キーが設定されていない&#10;    - No Authority: 対象テーブルに対するアクセス権が無い&#10;&#10;- レコードのエラー&#10;  - unique指定の有る項目に重複値を設定しようとした等、レコード単位で発生するエラー&#10;  - command系メソッドで判定(append, update, delete)&#10;  - 個別レコードのログオブジェクトのErrCDに設定(sdbLog.ErrCD = sdbMain.log.ErrCD)&#10;  - エラーの種類&#10;    - append&#10;      - Duplicate: unique項目に重複した値を設定。diffに{項目名:重複値} 形式で記録&#10;    - update&#10;    - delete&#10;" />
          <outline text="エラーの種類" _note="| No | 設定項目 | コード | 発生箇所 | 原因 |&#10;| --: | :-- | :-- | :-- | :-- |&#10;| 1 | qSts | No Authority | doQuery | 指定されたテーブル操作の権限が無い |&#10;| 2 | qSts | No command | doQuery | query.commandが無い、または文字列では無い |&#10;| 3 | qSts | No Table name | doQuery | query.tableが無い、または文字列では無い |&#10;| 4 | qSts | Invalid where clause | doQuery | (権限&quot;o&quot;で)where句の値がプリミティブ型ではない |&#10;| 5 | qSts | No Table | doQuery&amp;lt;br&amp;gt;genTable | (create以外で)対象テーブルが無い |&#10;| 6 | qSts | No cols and data | genTable | createで項目定義も初期データも無い |&#10;| 7 | qSts | Already Exist | createTable | シートが既に存在している |&#10;| 8 | qSts | Duplicate | createTable | 初期レコード内に重複が存在 |&#10;| 9 | qSts | Empty set | createTable&amp;lt;br&amp;gt;appendRow | query.setが不在、または配列の長さが0 |&#10;| 10 | qSts | Invalid set | appendRow | query.setが非配列なのに要素がオブジェクトではない |&#10;| 11 | qSts | No set | appendRow&amp;lt;br&amp;gt;updateRow | queryにメンバ&quot;set&quot;が不在 |&#10;| 12 | qSts | No where | deleteRow&amp;lt;br&amp;gt;updateRow | where句がqueryに無い |&#10;| 13 | qSts | Undefined Column | updateRow | 更新対象項目がテーブルに無い |&#10;| 14 | qSts | その他 | doQuery | エラーオブジェクトのmessage |&#10;| 15 | rSts | Duplicate | appendRow&amp;lt;br&amp;gt;updateRow | unique項目に重複した値を入れようとした |&#10;| 16 | Error | Invalid Argument | functionalyze | 不適切な引数 |&#10;| 17 | Error | Could not Lock | main | 規定回数以上シートのロックに失敗した |&#10;">
            <outline text="fatal error : ソース修正が必要な致命的エラー" _note="SpreadDbからの戻り値はErrorオブジェクト。変更履歴シートには残らない。&#10;" />
            <outline text="warning error : データや権限の状態により発生するエラー" _note="ソース修正は不要。SpreadDbからの戻り値は通常のオブジェクト。変更履歴シートに残る。" />
            <outline text="command系と非command系メソッドのエラー取扱の違い" _note="command系は他関数からの被呼出メソッドのため、エラーをqStsに持たせるだけで実行停止につながるErrorオブジェクトは返さない。&#10;非command系はこの制約が無いため、通常通りErrorオブジェクトを返す。Errorオブジェクトの扱いはcommand系メソッドで吸収する。&#10;" />
            <outline text="3 Backlinks">
              <outline text="qSts {string} クエリ単位の実行結果" _note="正常終了なら&quot;OK&quot;。エラーコードは&lt;a href=&quot;https://workflowy.com/#/60cbb24d684c&quot;&gt;エラーの種類&lt;/a&gt;参照" />
              <outline text="□qSts {string} クエリ単位の実行結果" _note="正常終了なら&quot;OK&quot;。エラーコードは&lt;a href=&quot;https://workflowy.com/#/60cbb24d684c&quot;&gt;エラーの種類&lt;/a&gt;参照。" />
              <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/b03c5ccd2f8f&quot;&gt;sdbMain&lt;/a&gt;[]}" _note="エラーコードについては「&lt;a href=&quot;https://workflowy.com/#/60cbb24d684c&quot;&gt;エラーの種類&lt;/a&gt;」参照" />
            </outline>
          </outline>
        </outline>
        <outline text="更新履歴(d154b1fe324f)" _note="- rev.1.2.0 : 2025/01/04〜01/26&#10;  - 設計思想を「クエリ単位に必要な情報を付加して実行、結果もクエリに付加」に変更&#10;  - 変更履歴を「クエリの実行結果」と「(クエリ内の)レコードの実行結果」の二種類のレコードレイアウトを持つように変更&#10;  - エラー発生時、messageではなくエラーコードで返すよう変更&#10;  - 1つの処理要求(query)で複数レコードを対象とする場合、一レコードでもエラーが発生したらエラーに&#10;  - 変更履歴シートのUUIDは削除&#10;  - workflowyで作成した使用をmarkdown化する機能を追加&#10;  - queryにSpreadDb呼出元での突合用項目&quot;queryId&quot;を追加&#10;  &#10;- rev.1.1.0 : 2024/12/27&#10;  - 上・左余白不可、複数テーブル/シート不可に変更(∵ロジックが複雑で保守性低下)&#10;    - テーブル名とシート名が一致&#10;    - 左上隅のセルはA1に固定&#10;  - 「更新履歴」の各項目の並び・属性他について、シート上の変更は反映されない(システム側で固定)&#10;  - 各シートの権限チェックロジックを追加(opt.account)&#10;  - クロージャを採用(append/update/deleteをprivate関数化)&#10;    - select文を追加(従来のclass方式ではインスタンスから直接取得)&#10;    - インスタンスを返す方式から、指定された操作(query)の結果オブジェクトを返すように変更&#10;  - getSchemaメソッドを追加&#10;  - 旧版のgetLogは廃止(select文で代替)&#10;- 仕様の詳細は[workflowy](&lt;a href=&quot;https://workflowy.com/#/4e03d2d2c266)参照&quot;&gt;https://workflowy.com/#/4e03d2d2c266)参照&lt;/a&gt;&#10;" />
      </outline>
      <outline text="class DebugTools">
        <outline text="メンバ">
          <outline text="step : 関数・メソッド内の進捗状況管理番号" />
          <outline text="seq : 実行された関数・メソッドの通番管理" />
          <outline text="mode : debug, verbose, etc" />
        </outline>
        <outline text="step() : stepを書き換える" />
        <outline text="log() : 指定された変数の内容を出力する" />
        <outline text="constructor()" />
        <outline text="ゴミ箱" _note="class DebugTools {&#10;  /**&#10;   * @param {Object} arg&#10;   * @param {string} arg.class=null - クラス名&#10;   * @param {string} arg.mode='debug'&#10;   */&#10;  constructor(arg){&#10;    this.step = 0;&#10;    this.seq = 0;&#10;    this.mode = arg.mode || 'debug';&#10;  }&#10;  step(arg){&#10;    this.step = arg;&#10;  }&#10;&#10;  /*&#10;  recursive(v,depth=0){&#10;    switch( this.whichType(v) ){&#10;      case 'Object':&#10;&#10;      case 'Array':&#10;    }&#10;  }&#10;  */&#10;  /**&#10;   * &#10;   * @param {Array|Array[]} arg &#10;   * @param {any} arg[0] - 変数。JSON.stringifyの第一引数&#10;   * @param {string[]}=null - JSON.stringfityの第二引数&#10;   * @param {number}=2 - JSON.stringifyの第三引数&#10;   * @returns &#10;   */&#10;  log(arg){&#10;    const v = {whois:&lt;a href=&quot;http://this.constructor.name&quot;&gt;this.constructor.name&lt;/a&gt;+'.log',step:0,rv:null};&#10;&#10;    if( !Array.isArray(arg[0]) ) arg = [arg];  // 配列可の引数は配列に統一&#10;&#10;    this.msg = [&#10;      (arg.class === null ? '' : arg.class + '.') + this.log.caller,&#10;    ];&#10;    for( v.i=0 ; v.i&amp;lt;arg.length ; v.i++ ){&#10;      //this.recursive(arg[v.i]);&#10;    }&#10;&#10;    v.step = 9; // 終了処理&#10;    return this.msg.join('\n');&#10;  }&#10;  &#10;  whichType(){&#10;    let rv = String(Object.prototype.toString.call(arg).slice(8,-1));&#10;    switch(rv){&#10;      case 'Number': if(Number.isNaN(arg)) rv = 'NaN'; break;&#10;      case 'Function': if(!('prototype' in arg)) rv = 'Arrow'; break;&#10;    }&#10;    return rv;&#10;  }&#10;}&#10;" />
      </outline>
      <outline text="表記上の注意事項">
        <outline text="バージョン番号は「抜本的見直し.インタフェース変更.デバッグ(インタフェース変更無し)」で採番" />
        <outline text="記憶領域(localStorage/DocumentProperties)は引数化、引数はメンバ化、メンバは内部変数化し、メソッド内では内部変数のみ使用" />
        <outline text="「記憶領域⊆引数⊆メンバ⊆内部変数」なので、記憶領域/引数/メンバ/内部変数には差分のみ記載" />
      </outline>
      <outline text="encryptedQuery 2.0.0">
        <outline text="ユーザ一覧">
          <outline text="userId {string|number} ユーザ識別子(primaryKey)" />
          <outline text="name {string} ユーザの氏名" />
          <outline text="email {string} ユーザのメールアドレス(unique)" _note="複数アカウントでの同一メアド共有は不許可&#10;" />
          <outline text="phone {string} ユーザの電話番号" />
          <outline text="address {string} ユーザの住所" />
          <outline text="note {string} 備考" />
          <outline text="created {string} ユーザ登録日時" />
          <outline text="updated {string} 最終更新日時" />
          <outline text="deleted {string} 論理削除日時" />
        </outline>
        <outline text="状態管理" _note="ユーザに関する情報の内、ユーザに閲覧・編集させない項目">
          <outline text="userId {string|number} ユーザ識別子(primaryKey)" />
          <outline text="note {string} 備考" />
          <outline text="CPkey {string} クライアント側公開鍵" />
          <outline text="authority {JSON} シート毎のアクセス権限。&lt;code&gt;{シート名:rwdos文字列}&lt;/code&gt; 形式" _note="r:read, a:append, u:update, d:delete, o:own only(自IDのみ参照・変更可)&#10;" />
          <outline text="trial {JSON} ログイン試行関連情報" _note="新規試行開始時にクリア&#10;">
            <outline text="passcode {number} 設定されたパスコード" />
            <outline text="datetime {string} パスコード通知メール送信日時" _note="パスコード要求(client)&amp;gt;要求受領(server)&amp;gt;パスコード生成&amp;gt;通知メール送信の内、メール送信日時&#10;" />
            <outline text="log {Object[]} 試行履歴情報">
              <outline text="t {string} パスコード検証日時" />
              <outline text="v {number} ユーザが入力したパスコード" />
              <outline text="c {number} エラーコード" _note="01: アカウント凍結中(凍結解除後、再試行可)&#10;02: ログイン権限無し(authorityが空オブジェクト)&#10;03: CPkey有効期限切れ&#10;04: CPkey有効期間内なのに署名と登録CPkeyが一致しない&#10;05: パスコード有効期限切れ&#10;06: パスコード有効期限内なのにパスコード不一致&#10;99: その他(システムエラー他)" />
            </outline>
          </outline>
          <outline text="unfreezing {string} 凍結解除日時。通常undefined、凍結時にメンバ追加" />
          <outline text="expiry {string} CPkey有効期限" _note="期限内に適切な暗号化・署名された要求はOKとする&#10;" />
          <outline text="lastSync {string} 前回同期日時" />
          <outline text="created {string} ユーザ登録日時" />
          <outline text="updated {string} 最終更新日時" />
          <outline text="deleted {string} 論理削除日時" />
        </outline>
        <outline text="class eqTrial" />
        <outline text="class encryptedQueryServer">
          <outline text="front()">
            <outline text="概要" _note="以下の各条件をtry〜catchで囲む&#10;">
              <outline text="userIdが登録されている" />
              <outline text="引数に&lt;code&gt;CPkey&lt;/code&gt; が平文で存在する" _note="⇒ パスコード通知メール発行要求">
                <outline text="前回パスコード通知メール発行から10分未満" _note="⇒ 何もしない" />
                <outline text="前回凍結期間から60分未満" _note="ここまで来るのは当然に「前回パスコード通知メール発行から10分以上経過」" />
              </outline>
              <outline text="tokenがSSkeyで復号可能" />
              <outline text="tokenの署名がシートに登録されているCPkeyと一致" />
              <outline text="シートに登録されているCPkeyが有効期限内" />
              <outline text="要求内容がauthority" />
              <outline text="要求内容がgetLog" />
              <outline text="要求内容がappend or update or delete" />
              <outline text="シート上のauthorityで権限あり" />
              <outline text="" />
            </outline>
            <outline text="引数">
              <outline text="arg {Object}">
                <outline text="userId {string}" />
                <outline text="request" />
              </outline>
            </outline>
            <outline text="戻り値">
              <outline text="result {boolean} true:成功" />
              <outline text="message {string} エラーメッセージ" />
            </outline>
          </outline>
        </outline>
      </outline>
      <outline text="[old]encryptedQuery 2.0.0">
        <outline text="開発の動機">
          <outline text="要改善点">
            <outline text="レスポンスが遅い">
              <outline text="全データを暗号化した上で授受しているため(?)" />
            </outline>
            <outline text="複数シートにまたがる更新ができない(しづらい)" _note="ex.参加者リストに追加時に参加者数集計シートも併せて更新等(シート関数を噛ませると遅くなるので、参加者リスト更新と同時に参加者数集計シートも更新しておきたい)&#10;" />
            <outline text="シート毎に権限設定ができない" _note="ex.掲示板シートはOKだが参加者リストは参照不可にする、等&#10;" />
          </outline>
          <outline text="追加・変更する点">
            <outline text="暗号化対象を全データからトークンのみに変更" />
            <outline text="clientに仮想シート(≒テーブル)を持たせ、server(Spread Sheet)と同期させる" />
            <outline text="同期をとるために授受するデータを、全件から前回同期後に変更された部分のみに変更" />
            <outline text="auth機能を追加" />
            <outline text="callbackに加え、テーブルのCRUDに特化したメソッドを用意" _note="※CRUDのみだとbulkMailのような「サーバ側で抽出結果を基に行う」処理ができなくなるため、callbackは残す&#10;" />
            <outline text="一回のリクエストで複数テーブルのCRUDに対応" />
            <outline text="更新結果は専用のシート(&quot;log&quot;シート)に追記していく" />
            <outline text="テーブル毎に「参照のみ」「参照＋更新」権限を設定可能にする" />
            <outline text="掲示板等、自動同期機能を追加" />
            <outline text="機能を簡素化">
              <outline text="pKeyを必須とし、更新対象はこれで特定可能にする" />
            </outline>
          </outline>
        </outline>
        <outline text="class encryptedQuery">
          <outline text="メンバ" _note="encryptedQueryClient/Server共通の既定値&#10;">
            <outline text="validityPeriod {number}=1日 最終ログイン日時からのログイン有効期間" _note="ログインは基本的にセッション有効期間とするが、有効期間を超えた場合は再ログインを必要とする" />
            <outline text="graceTime {number}=10分 メール送信〜パスコード確認処理終了までの猶予時間(ミリ秒)" _note="&#10;" />
            <outline text="passcodeValidityPeriod {number}=600000(10分) パスコードの有効期間。ミリ秒" _note="メール送信〜受領〜パスコード入力〜送信〜確認処理終了までの時間。通信に係る時間も含む。不正防止のため、始点/終点ともサーバ側で時刻を設定する。" />
            <outline text="maxTrial {number}=3 パスコード入力の最大試行回数" />
            <outline text="passcodeDigit {number}=6  パスコードの桁数" />
            <outline text="freezing {number}=3600000 連続失敗した場合の凍結期間。ミリ秒。既定値1時間" />
            <outline text="syncInterval {number}=0 自動更新する場合の間隔(ミリ秒)。0なら自動更新しない" />
            <outline text="bits {number}=1024 鍵長" />
            <outline text="tables {Object} {領域名:定義Obj}形式のテーブル構成定義" _note="①使用可能なデータ型はAlaSQL&quot;&lt;a href=&quot;https://github.com/AlaSQL/alasql/wiki/Data%20types&quot;&gt;Data &lt;/a&gt;&lt;a href=&quot;https://github.com/AlaSQL/alasql/wiki/Data%20types&quot;&gt;Type&lt;/a&gt;&lt;a href=&quot;https://github.com/AlaSQL/alasql/wiki/Data%20types&quot;&gt;s&lt;/a&gt;&quot;に準拠&#10;②ユーザのe-mail等、unique属性が付加された項目はクライアント側でのappend/update時にチェック&#10;③append時に既定値を設定したい場合、defaultで指定">
              <outline text="accounts {Object} アカウント一覧">
                <outline text="definition {Object[]} 項目定義">
                  <outline text="システム項目 : 更新があってもログに出力しない" />
                  <outline text="uuid {string} ユーザの主キー" _note="{label:'uuid',type:'uuid',suffix:'primary key'}&#10;" />
                  <outline text="name {string} ユーザ名" _note="{label:'name',type:'text',default:'(未設定)'}" />
                  <outline text="email {string} ユーザのメールアドレス" />
                  <outline text="phone {string} 連絡先電話番号" />
                  <outline text="role {string} ユーザの役割(=setup()で定義された付与するアクセス権限)" />
                  <outline text="CPkey {string} ユーザの公開鍵" />
                  <outline text="lastSync {string} 最終同期日時" />
                  <outline text="lastLogin {string} 最終ログイン日時" />
                  <outline text="trial {Object} ログイン試行関係情報">
                    <outline text="passcode {number} 最新のパスコード" />
                    <outline text="created {string} パスコード生成日時" _note="=最終パスコード通知メール送信日時" />
                    <outline text="lastTrial {string} 最終パスコード通知メール送信日時" />
                    <outline text="log {Object[]} ログイン試行のログ" _note="unshiftで常に0が最新、新規パスコード生成時にクリア。">
                      <outline text="timestamp {string} パスコード入力日時。クライアント側で設定" />
                      <outline text="entered {number} ユーザが入力したパスコード" />
                      <outline text="status {number} 試行結果" _note="0: パスコード新規発行&#10;1: ログイン成功&#10;2: パスコード不一致(再試行可)&#10;4: パスコード不一致(再試行不可、凍結に移行)&#10;5: ログイン権限無し&#10;6: アカウント凍結中&#10;7: 不適切な署名&#10;8: その他(システムエラー他。エラーメッセージ参照)&#10;" />
                      <outline text="message {string} エラーメッセージ" />
                    </outline>
                  </outline>
                  <outline text="begin {string} アカウントの有効期間開始日時" />
                  <outline text="end {string} アカウントの有効期間終了日時" />
                  <outline text="create {string} アカウント生成日時" />
                  <outline text="update {string} アカウント更新日時" />
                  <outline text="delete {string} アカウント削除日時(論理削除)" />
                  <outline text="1 Backlink">
                    <outline text="accountsシートが未作成なら作成(⇒&lt;a href=&quot;https://workflowy.com/#/2913661920c7&quot;&gt;定義&lt;/a&gt;)" />
                  </outline>
                </outline>
              </outline>
              <outline text="log {Object} 更新履歴">
                <outline text="definition {Object[]} 項目定義">
                  <outline text="timestamp {string} 更新日時" />
                  <outline text="uuid {string} 更新者のuuid" />
                  <outline text="result {number} front()の処理結果。&lt;a href=&quot;https://workflowy.com/#/078054b626eb&quot;&gt;result&lt;/a&gt;参照" />
                  <outline text="message {string} エラーメッセージ。エラー発生時以外は空白" />
                  <outline text="branch {string} 要求された処理名。append/update/delete等" />
                  <outline text="arg {string} 要求された処理に渡した引数オブジェクトのJSON" />
                  <outline text="rv {string} 要求された処理から返された値。Object/ArrayならJSON化" />
                  <outline text="table {string} 更新対象となった範囲名(テーブル名)" />
                  <outline text="before {string} 更新前の行データオブジェクト(JSON)" />
                  <outline text="after {string} 更新後の行データオブジェクト(JSON)" />
                  <outline text="diff {string} 差分情報。{差分項目名：[更新前,更新後],...}形式" />
                  <outline text="2 Backlinks">
                    <outline text="log {Object[]} 前回同期日時以降の&lt;a href=&quot;https://workflowy.com/#/3dccb0fdd2b4&quot;&gt;&quot;log&quot;シート&lt;/a&gt;行データのJSON" />
                    <outline text="logシートが未作成なら作成(⇒&lt;a href=&quot;https://workflowy.com/#/3dccb0fdd2b4&quot;&gt;定義&lt;/a&gt;)" />
                  </outline>
                </outline>
              </outline>
              <outline text="その他(ユーザ定義シート) {Object[]}" _note="クライアント側のcreate tableで使用する各項目の定義">
                <outline text="label {string} 項目名" />
                <outline text="type {string} データ型" />
                <outline text="suffix {string} &quot;not null&quot;等の制約、他" />
              </outline>
            </outline>
            <outline text="2 Backlinks">
              <outline text="メンバ(インスタンス変数)" _note="本項は導出項目のみ。CL/SV共通&lt;a href=&quot;https://workflowy.com/#/7567bf629d85&quot;&gt;メンバ&lt;/a&gt;、constructtorの&lt;a href=&quot;https://workflowy.com/#/10d03345527e&quot;&gt;引数 &lt;/a&gt;は除く。&#10;" />
              <outline text="メンバ" _note="本項は導出項目のみ。CL/SV共通&lt;a href=&quot;https://workflowy.com/#/7567bf629d85&quot;&gt;メンバ&lt;/a&gt;、constructorの&lt;a href=&quot;https://workflowy.com/#/0f40403814ce&quot;&gt;引数&lt;/a&gt;は除く。&#10;" />
            </outline>
          </outline>
          <outline text="constructor()">
            <outline text="概要">
              <outline text="config, arg, 既定値(v.default)をマージ、メンバとしてthisに保存" />
            </outline>
          </outline>
          <outline text="encToken()">
            <outline text="注意事項">
              <outline text="自局の秘密鍵、相手局の公開鍵はメンバとして保存済の前提(this.sKey, this.pKey)" />
            </outline>
            <outline text="引数">
              <outline text="sKey {Object} 自局の秘密鍵" />
              <outline text="pKey {string} 相手局の公開鍵" />
            </outline>
            <outline text="概要">
              <outline text="基となるオブジェクトを作成" />
              <outline text="Obj -&amp;gt; JSON(JSON.stringify)" />
              <outline text="JSON -&amp;gt; BASE64(await this.encB64)" />
              <outline text="BASE64 -&amp;gt; 暗号化・署名(cryptico.encrypt)" />
              <outline text="暗号文 -&amp;gt; URLセーフ(encodeURIComponent)" />
            </outline>
          </outline>
          <outline text="decToken()">
            <outline text="概要">
              <outline text="URLセーフ -&amp;gt; 暗号文(decodeURIComponent)" />
              <outline text="暗号文 -&amp;gt; BASE64(cryptico.decrypt)" />
              <outline text="BASE64 -&amp;gt; JSON(await this.decB64)" />
              <outline text="JSON -&amp;gt; Obj(JSON.parse)" />
            </outline>
          </outline>
        </outline>
        <outline text="クライアント側の構成">
          <outline text="localStorage" _note="sessionStorageはオンメモリと寿命が変わらないため、使用しない&#10;">
            <outline text="uuid {string} 利用者識別子" _note="同一メアドでの複数アカウント利用も考えられるので、識別子はe-mailとは別に設定可能とする" />
          </outline>
          <outline text="class encryptedQueryClient extends encryptedQuery">
            <outline text="メンバ(インスタンス変数)" _note="本項は導出項目のみ。CL/SV共通&lt;a href=&quot;https://workflowy.com/#/7567bf629d85&quot;&gt;メンバ&lt;/a&gt;、constructtorの&lt;a href=&quot;https://workflowy.com/#/10d03345527e&quot;&gt;引数 &lt;/a&gt;は除く。&#10;">
              <outline text="uuid {number} 利用者識別子" />
              <outline text="lastSync {string}='1970-01-01' 前回同期日時。初期値はundefined" />
              <outline text="lastLogin {string}='1970-01-01' 前回ログイン日時" />
              <outline text="lastRequest {string}='1970-01-01' 前回パスコード通知メール発行要求日時" />
              <outline text="thawing {string}='1970-01-01' 凍結解除日時" />
              <outline text="keyGenerate {string} クライアント側鍵ペアの生成日時" />
              <outline text="CSkey {Object} クライアント側秘密鍵" />
              <outline text="CPkey {string} クライアント側公開鍵" />
              <outline text="SPkey {string} サーバ側公開鍵" />
              <outline text="tables {Object} {領域名:以下メンバを持つオブジェクト}形式">
                <outline text="&lt;a href=&quot;https://workflowy.com/#/561b163cd0d7&quot;&gt;クライアント側テーブル用データ&lt;/a&gt;" />
              </outline>
            </outline>
            <outline text="constructor()">
              <outline text="引数 : 以下のメンバを持つオブジェクト">
                <outline text="prjName {string}='encryptedQuery' localStorageのキー名" />
                <outline text="api {string} サーバ側WebAPIのURL" />
              </outline>
              <outline text="概要">
                <outline text="uuidの特定" _note="if( URLクエリ文字列にID指定あり ){&#10;  idにURLクエリ文字列のID指定を設定&#10;} else if( localStorageにIDが存在 ){&#10;  idにlocalStorageのIDを設定&#10;} else {&#10;  for( 試行回数(this.maxTrial)=0 ; 0≦試行回数&amp;lt;3 ; 試行回数++ ){&#10;    id入力ダイアログを表示&#10;    if( 入力されたidが適切な形式 ) 試行回数=-1&#10;  }&#10;  if( 試行回数 === -1 ){&#10;    idに入力されたidを設定&#10;  } else {&#10;    this.thawingに凍結解除日時を設定&#10;  }&#10;}&#10;" />
                <outline text="引数・既定値からメンバを設定" />
                <outline text="クライアント側鍵ペアの作成" _note="v.step = 1.1; // 鍵ペアの作成&#10;v.password = createPassword();&#10;if( v.password instanceof Error ) throw v.password;&#10;v.key = cryptico.generateRSAKey(v.password,this.bits);&#10;&#10;v.step = 1.2; // メンバ変数に格納&#10;this.keyGenerate = Date.now();&#10;this.CPkey = cryptico.publicKeyString(v.key);&#10;this.CSkey = JSON.stringify(v.key.toJSON()),  // 文字列化された秘密鍵&#10;" />
                <outline text="SPkey未入手ならauthorize呼び出し" />
                <outline text="this.tablesに基づき各種テーブルを作成" />
              </outline>
            </outline>
            <outline text="authorize() : サーバ側のauth1/2を呼び出し、一連のログイン関係処理を行う">
              <outline text="概要" _note="// パスコード通知メール発行要求&#10;if( idが凍結中 ){&#10;  throw new Error('現在凍結中です')&#10;} else if( 前回のパスコード通知メール発行要求日時(lastRequest)から10分以上経過 ){&#10;  サーバ側にパスコード通知メール発行要求(v.eq.request(auth1))&#10;  lastRequestに現在日時設定&#10;}&#10;&#10;// パスコード入力&#10;for( 適正形式=false,試行回数=0 ; 0≦試行回数&amp;lt;3 ; 試行回数++ ){&#10;  パスコード入力画面表示&#10;  パスコード入力&#10;  if( 適正形式(数値) ){&#10;    r = パスコード確認要求(auth2)&#10;    if( r = 正常終了 ){&#10;      初期画面表示&#10;      試行回数=-1&#10;    } else {&#10;      if( 恒久的エラー(ex.権限無し、CPkey不一致) ){&#10;        throw new Error(r.message)&#10;      }&#10;      // 非恒久的エラー(再試行可能なエラー)：パスコード不一致&#10;    }&#10;  }&#10;}&#10;if( 試行回数 != -1 ){&#10;  throw new Error('試行回数を超えたので凍結します')&#10;}&#10;">
                <outline text="パスコード通知メール発行要求" _note="if( idが凍結中 ){  ※ this.thawing &amp;gt; Date.now()&#10;  throw new Error('現在凍結中です')&#10;} else if( 前回のパスコード通知メール発行要求日時から10分以上経過 ){&#10;  // this.lastRequest + this.passcodeValidityPeriod &amp;lt; Date.now()&#10;  サーバ側にパスコード通知メール発行要求(v.eq.front(auth1))&#10;  lastRequestに現在日時設定&#10;}" />
                <outline text="パスコード入力" _note="for( 適正形式=false,試行回数=0 ; 0≦試行回数&amp;lt;3 ; 試行回数++ ){&#10;  パスコード入力画面表示&#10;  パスコード入力&#10;  if( 適正形式(数値) ){&#10;    r = パスコード確認要求(auth2)&#10;    if( r = 正常終了 ){&#10;      試行回数=-1&#10;    } else {&#10;      if( 恒久的エラー(ex.権限無し、CPkey不一致) ){&#10;        throw new Error(r.message)&#10;      }&#10;      // 非恒久的エラー(再試行可能なエラー)：パスコード不一致&#10;    }&#10;  }&#10;}&#10;if( 試行回数 != -1 ){&#10;  throw new Error('試行回数を超えたので凍結します')&#10;}" />
                <outline text="this.tablesに初期テーブルデータをセット" _note="auth2正常終了時の戻り値.tablesをメンバとして保存">
                  <outline text="&lt;a href=&quot;https://workflowy.com/#/561b163cd0d7&quot;&gt;クライアント側初期テーブル用データ&lt;/a&gt;の構成" />
                  <outline text="this.tablesに基づきcreate tableを実行" _note="accounts.trial, logテーブルは作成対象外。&#10;" />
                  <outline text="auth2の&lt;a href=&quot;https://workflowy.com/#/5ed89bf06f52&quot;&gt;戻り値&lt;/a&gt;に基づきデータをセット" />
                </outline>
              </outline>
              <outline text="引数 : 無し" />
              <outline text="戻り値 : null | Error" />
            </outline>
            <outline text="request() : encryptedQueryServer.front()に対して処理要求を行う">
              <outline text="概要">
                <outline text="tokenの作成、暗号化(this.encToken)" />
                <outline text="encryptedQueryServer.front()への&lt;a href=&quot;https://workflowy.com/#/dd958d471b6a&quot;&gt;引数&lt;/a&gt;を作成">
                  <outline text="request()への引数＋メンバからtokenを作成" />
                  <outline text="syncにはtrueを設定" _note="this.syncIntervaleの値に関わらず、処理要求時は更新&#10;" />
                </outline>
                <outline text="doPostでfront()を呼び出し、&lt;a href=&quot;https://workflowy.com/#/72b8e229c963&quot;&gt;戻り値&lt;/a&gt;を取得" />
                <outline text="戻り値のtokenを復号(this.decToken)、SPkey未定ならthis.SPkeyに保存" />
                <outline text="戻り値のlogを基にテーブルを更新(this.syncTables呼び出し)" />
                <outline text="戻り値のdataを呼出元関数に返す" />
              </outline>
              <outline text="引数" _note="以下のメンバを持つオブジェクト。参考：encryptedQueryServer.front()の&lt;a href=&quot;https://workflowy.com/#/dd958d471b6a&quot;&gt;引数&lt;/a&gt;">
                <outline text="branch {string} 要求処理名。ex.&quot;auth1&quot;" />
                <outline text="data {string} 要求処理(メソッド)に渡す引数オブジェクトのJSON" />
              </outline>
              <outline text="戻り値">
                <outline text="data {Object} 要求処理結果。平文" />
              </outline>
              <outline text="v.1.0.0 source" _note="/** request: クライアント-&amp;gt;サーバ側への処理要求&#10; * &#10; * @param {string|Object} arg - サーバ側で分岐処理を行うコールバック関数に渡す引数&#10; * @returns &#10; */&#10;async request(arg=this.CPkey){&#10;  const v = {whois:&lt;a href=&quot;http://this.constructor.name&quot;&gt;this.constructor.name&lt;/a&gt;+'.request',step:0,rv:null};&#10;  console.log(`${v.whois} start.\narg(${whichType(arg)})=${stringify(arg)}`);&#10;  try {&#10;&#10;    // -------------------------------------------------&#10;    // step.1 : 問合せ先URL(WebAPI+param)を作成&#10;    // -------------------------------------------------&#10;&#10;    v.step = 1.1; // 平文か暗号文か判定。サーバ側公開鍵取得済なら暗号文とする。&#10;    v.isPlain = this.SPkey === null ? true : false;&#10;    vlog(v,'isPlain');&#10;&#10;    v.step = 1.2; // responseで署名検証のためにIDが必要なので付加し、JSON化&#10;    v.json = JSON.stringify({id:this.clientId,arg:arg});&#10;    vlog(v,'json');&#10;&#10;    v.step = 1.3; // base64化&#10;    v.b64 = await this.encB64(v.json);&#10;    vlog(v,'b64');&#10;&#10;    v.step = 1.4; // 暗号化&#10;    if( v.isPlain ){&#10;      v.str = v.b64;&#10;    } else {&#10;      v.enc = cryptico.encrypt(v.b64,this.SPkey,this.CSkey);&#10;      vlog(v,'enc');&#10;      if( v.enc.status !== 'success' ) throw new Error('encrypt failed.');&#10;      v.str = v.enc.cipher;&#10;    }&#10;&#10;    v.step = 1.5; // URLセーフ化&#10;    v.param = encodeURIComponent(v.str);&#10;    vlog(v,'param');&#10;&#10;    v.step = 1.6; // WebAPI+paramでURL作成&#10;    v.url = `${this.url}?${v.isPlain ? this.pUP : this.eUP}=${v.param}`;&#10;    vlog(v,'url');&#10;&#10;&#10;    // -------------------------------------------------&#10;    // step.2 : サーバ側に問合せ実行、結果検証&#10;    // -------------------------------------------------&#10;&#10;    v.step = 2.1; // 問合せの実行、ネットワークエラーなら弾く&#10;    v.r = await fetch(v.url,{&#10;      method: 'GET',&#10;      headers: {&#10;        &quot;Accept&quot;: &quot;application/json&quot;,&#10;        &quot;Content-Type&quot;: &quot;text/plain&quot;,&#10;      }&#10;    });&#10;    vlog(v,'r');&#10;    if( !v.r.ok ) throw new Error(`[fetch error] status=${v.r.status}`);&#10;&#10;    v.step = 2.2; // オブジェクト化&#10;    v.obj = await v.r.json();&#10;    vlog(v,'obj');&#10;&#10;    v.step = 2.3; // 分岐先関数では無く、response()で起きたエラーの場合はthrow&#10;    // ※分岐先関数でのエラーは本関数(response)の戻り値として本関数呼出元に返す&#10;    if( v.obj.isOK === false ){&#10;      throw new Error(v.obj.message);&#10;    }&#10;&#10;    v.step = 2.4;&#10;    v.res = v.obj.rv;&#10;    vlog(v,'res');&#10;&#10;&#10;    // -------------------------------------------------&#10;    // step.3 : 呼出元への戻り値の作成(結果の復号、署名検証)&#10;    // -------------------------------------------------&#10;&#10;    v.step = 3.1; // decrypt&#10;    v.dec = cryptico.decrypt(v.res,this.CSkey);&#10;    if( v.dec.status !== 'success' ){&#10;      throw new Error(`decrypt failed.\n${stringify(v.dec)}`);&#10;    }&#10;&#10;    v.step = 3.2; // 署名検証、SPkeyが無ければ保存&#10;    if( v.dec.publicKeyString !== this.SPkey ){&#10;      if( this.SPkey === null ){&#10;        this.conf.SPkey = this.SPkey = v.dec.publicKeyString;&#10;        // sessionStorageに保存&#10;        sessionStorage.setItem(this.storageKey,JSON.stringify(this.conf));&#10;      } else {&#10;        throw new Error('サーバ側の署名が不正です');&#10;      }&#10;    }&#10;&#10;    v.step = 3.3; // base64 -&amp;gt; JSON&#10;    v.json = await this.decB64(v.dec.plaintext);&#10;&#10;    v.step = 3.4; // JSON -&amp;gt; Object&#10;    v.rv = this.objectizeJSON(v.json);&#10;    if( v.rv === null ){&#10;      throw new Error(`invalid JSON\n${stringify(v.json)}`);&#10;    }&#10;&#10;&#10;    v.step = 9; // 終了処理&#10;    console.log(`${v.whois} normal end.\nv.rv=${stringify(v.rv)}`);&#10;    return v.rv;&#10;&#10;  } catch(e) {&#10;    e.message = `${v.whois} abnormal end at step.${v.step}\n${e.message}`;&#10;    console.error(`${e.message}\nv=${stringify(v)}`);&#10;    return e;&#10;  }&#10;}" />
            </outline>
            <outline text="syncTables() : サーバ側テーブルの更新情報をローカルに反映">
              <outline text="概要">
                <outline text="引数を順次走査" />
                <outline text="①before, after両方存在 ⇒ diffを基に更新処理" />
                <outline text="②before不存在 &amp; after存在 ⇒ afterを追加" />
                <outline text="③before存在 &amp; after不存在 ⇒ 対象を削除" />
              </outline>
              <outline text="引数">
                <outline text="request()の戻り値オブジェクトの&lt;a href=&quot;https://workflowy.com/#/764e6d8b282a&quot;&gt;log {Object[]} 前回同期日時以降の&quot;log&quot;シート行データのJSON&lt;/a&gt;" />
              </outline>
              <outline text="戻り値 : null | Error" />
            </outline>
            <outline text="append() : 新規レコードを追加" _note="サーバ側(シート)にpKeyが存在していた場合はエラーが返る">
              <outline text="概要">
                <outline text="行オブジェクトの未定義項目に既定値を設定" _note="type='uuid'である項目へのUUID採番を含む" />
                <outline text="クライアント側の対象テーブルにinsertを実行" _note="ユーザのe-mail等、unique属性が付加された項目に重複した値が無いかチェック" />
                <outline text="request()でサーバ側のシートに追加要求" _note="{branch:'append',data:insertしたデータオブジェクト}" />
              </outline>
              <outline text="引数">
                <outline text="arg {Object[]}">
                  <outline text="range {string} 範囲名" />
                  <outline text="data {Object[]} 追加する行オブジェクトの配列" />
                </outline>
              </outline>
              <outline text="戻り値">
                <outline text="success {Object[]} 追加された行オブジェクト" />
                <outline text="failure {Object[]} 追加に失敗した行オブジェクト" _note="失敗が無い場合でも空配列として作成" />
              </outline>
            </outline>
            <outline text="update() : 既存レコードを更新" _note="サーバ側(シート)にpKeyが存在していない場合はエラーが返る">
              <outline text="概要">
                <outline text="クライアント側の対象テーブルにupdateを実行" />
                <outline text="request()でサーバ側のシートに更新要求" _note="{branch:'update',data:insertしたデータオブジェクト}" />
              </outline>
              <outline text="引数">
                <outline text="arg {Object[]}">
                  <outline text="range {string} 範囲名" />
                  <outline text="selector {Object} 更新箇所の特定情報">
                    <outline text="key {string} キーとなる項目名" />
                    <outline text="value {any} キーの値" />
                  </outline>
                  <outline text="data {Object} 更新対象項目のオブジェクト" />
                </outline>
              </outline>
              <outline text="戻り値">
                <outline text="success {Object[]} 追加された行オブジェクト" />
                <outline text="failure {Object[]} 追加に失敗した行オブジェクト" _note="失敗が無い場合でも空配列として作成" />
              </outline>
            </outline>
            <outline text="delete() : 既存レコードを物理削除" _note="サーバ側(シート)にpKeyが不存在の場合はエラーが返る" />
            <outline text="synchronize() : サーバ側のテーブルと同期させる" />
            <outline text="deamon() : 定期的に指定された処理を行う">
              <outline text="引数">
                <outline text="proc" />
                <outline text="interval" />
              </outline>
            </outline>
            <outline text="encB64() : 日本語文字列を含め、base64にエンコード">
              <outline text="source" _note="/** encB64: 日本語文字列を含め、base64にエンコード&#10;  * @param {string} parts - 変換する日本語文字列&#10;  * @returns {string} base64エンコード文字列&#10;  * &#10;  * - Qiita [JavaScriptでBase64エンコード・デコード](&lt;a href=&quot;https://qiita.com/i15fujimura1s/items/6fa5d16b1e53f04f3b06&quot;&gt;https://qiita.com/i15fujimura1s/items/6fa5d16b1e53f04f3b06&lt;/a&gt;)&#10;  * - Zenn [URLセーフなBase64エンコーディングとデコーディング](&lt;a href=&quot;https://zenn.dev/jusanz/articles/d6cec091d45657&quot;&gt;https://zenn.dev/jusanz/articles/d6cec091d45657&lt;/a&gt;)&#10;  * &#10;  * @example&#10;  * &#10;  * ```&#10;  * v.str = 'これはテスト用文字列です';&#10;  * v.enc = await base64Encode(v.str);&#10;  * v.dec = await base64Decode(v.enc);&#10;  * console.log(`str=${v.str}\nenc=${v.enc}\ndec=${v.dec}`);&#10;  * ```&#10;  */&#10;&#10;encB64(...parts){&#10;  return new Promise(resolve =&amp;gt; {&#10;    const reader = new FileReader();&#10;    reader.onload = () =&amp;gt; {&#10;      const offset = reader.result.indexOf(&quot;,&quot;) + 1;&#10;      resolve(reader.result.slice(offset));&#10;    };&#10;    reader.readAsDataURL(new Blob(parts));&#10;  });&#10;}&#10;" />
            </outline>
            <outline text="decB64() : base64を日本語文字列にデコード">
              <outline text="source" _note="/** decB64: base64を日本語文字列にデコード&#10;  * @param {string} text - base64文字列&#10;  * @param {string} charset='UTF-8'&#10;  * @returns {string} 復号された日本語文字列&#10;  * &#10;  * - Qiita [JavaScriptでBase64エンコード・デコード](&lt;a href=&quot;https://qiita.com/i15fujimura1s/items/6fa5d16b1e53f04f3b06&quot;&gt;https://qiita.com/i15fujimura1s/items/6fa5d16b1e53f04f3b06&lt;/a&gt;)&#10;  * &#10;  * @example&#10;  * &#10;  * ```&#10;  * v.str = 'これはテスト用文字列です';&#10;  * v.enc = await base64Encode(v.str);&#10;  * v.dec = await base64Decode(v.enc);&#10;  * console.log(`str=${v.str}\nenc=${v.enc}\ndec=${v.dec}`);&#10;  * ```&#10;  */&#10;decB64(text, charset='UTF-8') {&#10;  return fetch(`data:text/plain;charset=${charset};base64,` + text)&#10;  .then(response =&amp;gt; response.text());&#10;}&#10;" />
            </outline>
          </outline>
        </outline>
        <outline text="サーバ側の構成">
          <outline text="DocumentPropertiesの構成" _note="項目名'config'とし、以下のメンバを持つオブジェクトとして定義&#10;">
            <outline text="keyGenerate {string} サーバ側鍵ペアの生成日時" />
            <outline text="SPkey {string} サーバ側公開鍵" />
            <outline text="SSkey {string} 文字列化したサーバ側秘密鍵" />
          </outline>
          <outline text="doPost()">
            <outline text="概要">
              <outline text="POSTされたJSONをオブジェクト化(v.params)" />
              <outline text="DocumentPropertiesの設定情報を取得、オブジェクト化(v.config)" />
              <outline text="encryptedQueryServerのインスタンスを作成(v.eq)" />
              <outline text="v.eq.dispatch()にv.paramsを渡し、結果をv.rvとして取得" />
              <outline text="v.rvを呼出元に返す" />
            </outline>
            <outline text="v.1.0.0 source" _note="function doGet(e){&#10;  const v = {whois:'doGet',step:0,rv:{}};&#10;  console.log(`${v.whois} start.\ne.parameter=${stringify(e.parameter)}`);&#10;  try {&#10;&#10;    v.step = 1.1; // URLクエリ文字列未設定なら導通テストと看做す&#10;    if( Object.keys(e.parameter).length === 0 ){&#10;      v.rv = {status:-1,message:'ping test'};&#10;      return ContentService&#10;      .createTextOutput(JSON.stringify(v.rv,null,2))&#10;      .setMimeType(ContentService.MimeType.JSON);&#10;    }&#10;    console.log(`${v.whois} step ${v.step} end.`);&#10;&#10;    v.step = 1.2; // 設定情報を取得&#10;    v.conf = JSON.parse(PropertiesService.getDocumentProperties().getProperty('config'));&#10;    console.log(`${v.whois} step ${v.step} end.`);&#10;&#10;    v.step = 1.3; // ユーザ情報を取得&#10;    v.master = new SingleTable(v.conf.master.sheetName);&#10;    console.log(`${v.whois} step ${v.step} end.`);&#10;&#10;    v.step = 2; // 暗号化通信用インスタンス作成&#10;    v.eq = new encryptedQuery({&#10;      isClient: false,&#10;      storageKey: v.conf.sys.storageKey,&#10;      master: v.master,&#10;      IDcol: 'entryNo',&#10;      CPcol: 'CPkey',&#10;      upv: v.conf.sys.upv,&#10;      passcodeValidityPeriod: v.conf.sys.auth.passcodeValidityPeriod,&#10;    });&#10;    console.log(`${v.whois} step ${v.step} end.`);&#10;&#10;    v.step = 3.1; // 処理分岐用関数を定義。以下はencryptedQuery.response()からv.branchに渡される引数の内容&#10;    // @param {Object} arg&#10;    // @param {Boolean} arg.isPlain - true:平文、false:暗号文&#10;    // @param {SingleTable} arg.master - ユーザ情報のシートオブジェクト&#10;    // @param {Object.&amp;lt;string,any&amp;gt;} arg.user - master内の該当ユーザの情報&#10;    // @param {number|string} &lt;a href=&quot;http://arg.id&quot;&gt;arg.id&lt;/a&gt; - ユーザを特定する値&#10;    // @param {Object} arg.arg - encryptedQuery.request()に渡された、分岐先関数の引数&#10;    // @param {number} arg.expire - クライアント側鍵の有効期間。既定値48時間&#10;    v.branch = (arg) =&amp;gt; {&#10;      console.log(`v.branch start.\narg(${whichType(arg)})=${stringify(arg)}`);&#10;      if( arg.isPlain === true ){ // 平文で渡された⇒パスコード通知メール発行要求&#10;        //v.rv = auth1({entryNo:&lt;a href=&quot;http://arg.id&quot;&gt;arg.id&lt;/a&gt;,CPkey:arg.arg},v.master);&#10;        v.rv = auth1({&#10;          CPkey: arg.arg,&#10;          mail: v.conf.sys.passcodeNotification,&#10;          entryNo: &lt;a href=&quot;http://arg.id&quot;&gt;arg.id&lt;/a&gt;,&#10;          master: v.master,&#10;          user: arg.user,&#10;          conf: v.conf.sys.auth,&#10;          sheet: v.conf.master.cols,&#10;        });&#10;      } else {&#10;        //引数が暗号化されていた場合の分岐処理&#10;        if( arg.arg.func === 'bulkMail' ){&#10;          // 他で利用する可能性もあるので、スタッフ一覧はdoGet内で取得&#10;          v.staff = new SingleTable(v.conf.staff.sheetName);&#10;          v.rv = bulkMail(Object.assign({&#10;            to: 'スタッフ',&#10;            subject: '校庭キャンプ2024に関するお知らせ',&#10;            type: 'plain',&#10;            body: 'これはテストです',&#10;            name: '下北沢小おやじの会',&#10;            replyTo: v.conf.sys.staffML,&#10;            hold: true, // 下書きとして保存(即時送信はしない)&#10;            master: v.master,   // 参加者マスタ&#10;            staff: v.staff,     // スタッフマスタ&#10;          },arg.arg));&#10;        } else if( arg.arg.func === 'updateParticipant' ) {&#10;          v.r = arg.master.update(arg.arg.data,{key:'entryNo',value:arg.arg.entryNo});&#10;          v.rv = v.r instanceof Error&#10;          ? {isOK:false,message:v.rv.message}&#10;          : {isOK:true,data:arg.master.data};&#10;        } else {&#10;          v.rv = auth2({&#10;            passcode: arg.arg,&#10;            entryNo: &lt;a href=&quot;http://arg.id&quot;&gt;arg.id&lt;/a&gt;,&#10;            master: v.master,&#10;            user: arg.user,&#10;            conf: v.conf.sys.auth,&#10;            sheet: v.conf.master.cols,&#10;          });  &#10;        }&#10;&#10;        //if( !isNaN(arg) ){ v.r = auth2(arg); }&#10;        //else if( arg === 'get' ){ v.r = v.eq.master.data; }&#10;        //else if( arg.hasOwnProperty('id') &amp;&amp; arg.hasOwnProperty('data') )&#10;        //{ v.r = v.eq.master.update(&lt;a href=&quot;http://arg.id&quot;&gt;arg.id&lt;/a&gt;,arg.data)}&#10;        //else { v.r = new Error('invalid function type.')}&#10;        //v.rv = {arg:arg,isPlain:isPlain}; // テスト用ダミー&#10;      }&#10;      return v.rv;&#10;    };&#10;    console.log(`${v.whois} step ${v.step} end.`);&#10;&#10;    v.step = 3.2; // 処理分岐用関数を実行&#10;    v.rv = v.eq.response(e.parameter,v.branch);&#10;    console.log(`${v.whois} step ${v.step} end.`);&#10;&#10;    v.step = 9; // 終了処理&#10;    console.log(`${v.whois} normal end.\nv.rv(${whichType(v.rv)})=${stringify(v.rv)}`);&#10;&#10;  } catch(e) {&#10;    e.message = `${v.whois} abnormal end at step.${v.step}\n${e.message}`;&#10;    console.error(`${e.message}\nv=${stringify(v)}`);&#10;    v.rv = {status:-1,message:e.message};&#10;  } finally {&#10;    return ContentService&#10;    .createTextOutput(JSON.stringify(v.rv,null,2))&#10;    .setMimeType(ContentService.MimeType.JSON);&#10;  }&#10;}" />
          </outline>
          <outline text="class encryptedQueryServer extends encryptedQuery">
            <outline text="メンバ" _note="本項は導出項目のみ。CL/SV共通&lt;a href=&quot;https://workflowy.com/#/7567bf629d85&quot;&gt;メンバ&lt;/a&gt;、constructorの&lt;a href=&quot;https://workflowy.com/#/0f40403814ce&quot;&gt;引数&lt;/a&gt;は除く。&#10;">
              <outline text="uuid {string} 要求元のユーザ識別子" />
              <outline text="user {Object} 要求元アカウントのユーザ情報オブジェクト" />
              <outline text="tables {Object} 範囲名をメンバ名とする複数テーブル情報のオブジェクト" />
            </outline>
            <outline text="constructor()">
              <outline text="概要">
                <outline text="config, arg, 既定値(v.default)をマージ、メンバとしてthisに保存(super())" />
                <outline text="accountsシートが未作成なら作成(⇒&lt;a href=&quot;https://workflowy.com/#/2913661920c7&quot;&gt;定義&lt;/a&gt;)" />
                <outline text="logシートが未作成なら作成(⇒&lt;a href=&quot;https://workflowy.com/#/3dccb0fdd2b4&quot;&gt;定義&lt;/a&gt;)" />
                <outline text="tablesで定義されているテーブルをSingleTableインスタンスとしてメンバ化" _note="logは以下の理由によりSingleTableではなく単純なシートオブジェクトとして保持&#10;1. appendのみでCRUDなし&#10;2. 空行対応他、多様性に配慮必要なし&#10;" />
                <outline text="サーバ側鍵ペアが未生成なら作成、DocumentPropertiesに保存" _note="v.step = 1.1; // 鍵ペアの作成&#10;v.password = createPassword();&#10;if( v.password instanceof Error ) throw v.password;&#10;v.key = cryptico.generateRSAKey(v.password,this.bits);&#10;&#10;v.step = 1.2; // オブジェクトv.configに各種設定値をセット&#10;v.config = {&#10;keyGenerate: Date.now(),&#10;SPkey: cryptico.publicKeyString(v.key),&#10;SSkey: JSON.stringify(v.key.toJSON()),  // 文字列化された秘密鍵&#10;};&#10;&#10;v.step = 2; // DocumentPropertiesへの保存&#10;PropertiesService.getDocumentProperties().setProperty('config',JSON.stringify(v.config));&#10;" />
              </outline>
              <outline text="引数 : 以下のメンバを持つオブジェクト">
                <outline text="config {Object} DocumentPropertiesに保存されていた内容" />
                <outline text="accountSheetName {string}='accounts' ユーザ情報のシート名" />
                <outline text="logSheetName{string}='log' ログのシート名" />
                <outline text="tables {Object} 範囲名をメンバ名とする複数テーブル情報のオブジェクト">
                  <outline text="range {string} 対象データ範囲のA1記法。1シート1テーブルとなっていない場合、範囲を特定するために使用。1シート1テーブルならシート名" />
                  <outline text="pKey {string}='uuid' 一意キー項目名。ログ等、追加のみで書き換えを前提としない場合以外は必須。複合キーは不可" />
                  <outline text="CPkey {string}='CPkey' CPkeyを格納する欄名。accountシート用" />
                  <outline text="trial {string}='trial' 試行情報を格納する欄名" />
                  <outline text="role {string}='role' 役割を格納する欄名" />
                  <outline text="1 Backlink">
                    <outline text="constructor()の引数Obj.&lt;a href=&quot;https://workflowy.com/#/752c37c55bd4&quot;&gt;tables&lt;/a&gt;" />
                  </outline>
                </outline>
                <outline text="mail {Object} パスコード通知メール関係の定義">
                  <outline text="subject {string}='パスコード通知'" />
                  <outline text="body {string}='パスコードは以下の通りです\n\n::passcode::' - メール本文(非html)。パスコード設定箇所は`::passcode::`をプレースホルダとする" />
                  <outline text="sender {string} メール送信者名" />
                </outline>
                <outline text="branch {Object} 分岐先関数の定義" _note="ex.{append:{func:()=&amp;gt;{..},auth:{admin:true,guest:false}}&#10;append/update/deleteはargで無指定ならメソッドをconstructorでセット(arg優先)&#10;">
                  <outline text="func {Function} 分岐先関数" />
                  <outline text="auth {Object} role毎に分岐先関数実行に必要な権限の有無を定義" />
                </outline>
                <outline text="role {string} user.func毎に定義された、テーブルへのアクセス権限" _note="{役割名:{範囲名:権限},..}のJSON。以下は例&#10;role = {&#10;  admin: {auth1:true, auth2:true, boardRead:true,boardWrite:true...},&#10;  guest: {auth1:true, auth2:true, boardRead:true,boardWrite:false,...},&#10;}&#10;【旧版】&#10;role = {&#10;  admin: {accounts:'rw',log:'rw',board:'rw',summary:'rw'},&#10;  staff: {accounts: 'rw',log:'rw',board:'rw',summary:'r'},&#10;  supporter: {log:'w',board:'rw',summary:'r'},&#10;  participant: {board:'r',summary:'r'},&#10;  guest: {board:'r'},&#10;}&#10;" />
                <outline text="1 Backlink">
                  <outline text="メンバ" _note="本項は導出項目のみ。CL/SV共通&lt;a href=&quot;https://workflowy.com/#/7567bf629d85&quot;&gt;メンバ&lt;/a&gt;、constructorの&lt;a href=&quot;https://workflowy.com/#/0f40403814ce&quot;&gt;引数&lt;/a&gt;は除く。&#10;" />
                </outline>
              </outline>
              <outline text="戻り値 : Error or インスタンス" />
            </outline>
            <outline text="front() : encryptedQueryClientからの要求に基づく処理を行い、結果を戻す">
              <outline text="概要">
                <outline text="ユーザ情報を取得、メンバに格納(&lt;a href=&quot;http://this.id&quot;&gt;this.id&lt;/a&gt;, this.user)" />
                <outline text="暗号化されていた場合は復号(this.decToken)" />
                <outline text="実行権限のチェック" _note="※&lt;a href=&quot;https://workflowy.com/#/078054b626eb&quot;&gt;result&lt;/a&gt;参照">
                  <outline text="accountsシート登録情報に基づくチェック" />
                  <outline text="token有りの場合のチェック" />
                </outline>
                <outline text="分岐先関数を呼び出し" />
                <outline text="戻り値Objに分岐先関数の処理結果、lastSync以降の差分を設定" />
                <outline text="返信用&lt;a href=&quot;https://workflowy.com/#/43b4edef5965&quot;&gt;token&lt;/a&gt;の作成(this.encToken)" _note="token.responseTimeの追加設定、token.lastSyncの更新" />
              </outline>
              <outline text="引数" _note="以下のメンバを持つオブジェクト">
                <outline text="uuid {string} accountsシート上の主キー" />
                <outline text="token {string} 以下のメンバを持つオブジェクトを暗号化＋署名した文字列。未認証の場合undefined">
                  <outline text="requestTime {number} クライアント側での発信時刻(UNIX時刻)" />
                  <outline text="responseTime {number} サーバ側での返信時刻(UNIX時刻)" />
                  <outline text="branch {string} 要求処理名(=this.branchのラベル)。ex.&quot;auth1&quot;" />
                  <outline text="lastSync {number} 前回同期日時" />
                  <outline text="2 Backlinks">
                    <outline text="&lt;a href=&quot;https://workflowy.com/#/43b4edef5965&quot;&gt;token&lt;/a&gt; {Object}" />
                    <outline text="返信用&lt;a href=&quot;https://workflowy.com/#/43b4edef5965&quot;&gt;token&lt;/a&gt;の作成(this.encToken)" _note="token.responseTimeの追加設定、token.lastSyncの更新" />
                  </outline>
                </outline>
                <outline text="data {string} 要求処理(メソッド)に渡す引数オブジェクトのJSON" />
                <outline text="sync {boolean} trueならlastSync以降の差分を要求" />
                <outline text="2 Backlinks">
                  <outline text="encryptedQueryServer.front()への&lt;a href=&quot;https://workflowy.com/#/dd958d471b6a&quot;&gt;引数&lt;/a&gt;を作成" />
                  <outline text="引数" _note="以下のメンバを持つオブジェクト。参考：encryptedQueryServer.front()の&lt;a href=&quot;https://workflowy.com/#/dd958d471b6a&quot;&gt;引数&lt;/a&gt;" />
                </outline>
              </outline>
              <outline text="戻り値">
                <outline text="&lt;a href=&quot;https://workflowy.com/#/43b4edef5965&quot;&gt;token&lt;/a&gt; {Object}" />
                <outline text="result {number}" _note="          0: 正常(エラー項目無し)&#10;&#10;// accountシート登録情報に基づくチェック&#10;2^ 0 =    1: uuidがユーザ一覧(accountシート)に不存在&#10;2^ 1 =    2: メールアドレス未登録&#10;2^ 2 =    4: roleが未登録&#10;2^ 3 =    8: 指定分岐先関数の実行権限無し&#10;2^ 4 =   16: アカウント凍結中&#10;2^ 5 =   32: 有効期間始期未登録&#10;2^ 6 =   64: 有効期間終期未登録&#10;2^ 7 =  128: アカウントの有効期間外&#10;2^ 8 =  256: 要求処理(arg.token.branch)の実行権限無し&#10;&#10;// 以下、token有りの場合&#10;2^16 =  65,536: 復号失敗(SPkeyが不適切)&#10;2^17 = 131,072: CPkeyが未登録&#10;2^18 = 262,144: 不適切な署名(CPkey不一致)&#10;2^19 = 524,228: 最終ログイン日時から一定以上経過(lastLogin+validPeriod&amp;gt;Date.now())&#10;　※クライアント側鍵ペアの有効期間チェックは本項で代替する&#10;">
                  <outline text="2 Backlinks">
                    <outline text="result {number} front()の処理結果。&lt;a href=&quot;https://workflowy.com/#/078054b626eb&quot;&gt;result&lt;/a&gt;参照" />
                    <outline text="実行権限のチェック" _note="※&lt;a href=&quot;https://workflowy.com/#/078054b626eb&quot;&gt;result&lt;/a&gt;参照" />
                  </outline>
                </outline>
                <outline text="message {string} エラーメッセージ" />
                <outline text="data {Object} 要求処理メソッドからの戻り値(JSON)。結果コード等を含む" />
                <outline text="log {Object[]} 前回同期日時以降の&lt;a href=&quot;https://workflowy.com/#/3dccb0fdd2b4&quot;&gt;&quot;log&quot;シート&lt;/a&gt;行データのJSON">
                  <outline text="1 Backlink">
                    <outline text="request()の戻り値オブジェクトの&lt;a href=&quot;https://workflowy.com/#/764e6d8b282a&quot;&gt;log {Object[]} 前回同期日時以降の&quot;log&quot;シート行データのJSON&lt;/a&gt;" />
                  </outline>
                </outline>
                <outline text="1 Backlink">
                  <outline text="doPostでfront()を呼び出し、&lt;a href=&quot;https://workflowy.com/#/72b8e229c963&quot;&gt;戻り値&lt;/a&gt;を取得" />
                </outline>
              </outline>
            </outline>
            <outline text="auth1() : パスコードメールを送信" _note="クライアント側の処理はencryptedQueryClient.authorize()「&lt;a href=&quot;https://workflowy.com/#/a4a6dbaf2b81&quot;&gt;概要&lt;/a&gt;」参照">
              <outline text="概要" _note="front()でアカウント登録や実行権限のチェックは済んでいるので、auth1でのチェックはパスコード有効期限のみ行う。&#10;">
                <outline text="前回パスコード発行後、パスコードの有効期間(passcodeValidityPeriod)以内なら以降の処理はスキップ" />
                <outline text="パスコード生成" _note="this.user[v.sheet.trial].passcode = Math.floor(Math.random() * (10 ** v.conf.passcodeDigit));&#10;this.user[v.sheet.trial].created = v.now;" />
                <outline text="メール送信" _note="v.draft = GmailApp.createDraft(&#10;  this.user[v.mail.recipient], // 宛先&#10;  v.mail.subject, // ex.'[連絡]校庭キャンプ2024 パスコード',&#10;  v.mail.body.replaceAll(/::passcode::/g,&#10;    ('0'.repeat(v.conf.passcodeDigit)+this.user[v.sheet.trial].passcode).slice(-v.conf.passcodeDigit)),&#10;  {name: v.mail.sender}, // ex.'下北沢小おやじの会'。HTMLメールならhtmlBody要素で追加指定&#10;);&#10;GmailApp.getDraft(v.draft.getId()).send();&#10;console.log(v.whois+'.'+v.step+': Mail Remaining Daily Quota:'&#10;  + MailApp.getRemainingDailyQuota());&#10;" />
                <outline text="accountsシートの試行情報(trial)を書き換え" _note="v.dObj = {};&#10;v.dObj[v.sheet.trial] = JSON.stringify(this.user[v.sheet.trial]);&#10;v.dObj[v.sheet.CPkey] = arg.CPkey;&#10;v.dObj[v.sheet.auth] = this.user[v.sheet.auth];&#10;vlog(v,'dObj');&#10;v.r = arg.master.update(v.dObj,{where:o=&amp;gt;o[&lt;a href=&quot;http://v.sheet.id&quot;&gt;v.sheet.id&lt;/a&gt;]==v.entryNo});&#10;vlog(v,'r');&#10;if( v.r instanceof Error ) throw v.r;&#10;" />
                <outline text="logへの記録" />
              </outline>
              <outline text="引数">
                <outline text="CPkey {string} クライアント側公開鍵" />
              </outline>
              <outline text="戻り値">
                <outline text="result {number}" _note="0: 処理成功(パスコード通知メールを新規発行)&#10;1: 処理成功(パスコード通知メールは10分以内なので発行省略)&#10;9: システム、その他エラー。message参照&#10;" />
                <outline text="message {string} エラーメッセージ。正常終了ならundefined" />
              </outline>
            </outline>
            <outline text="auth2() : 入力されたパスコードの検証">
              <outline text="概要">
                <outline text="パスコードの検証">
                  <outline text="パスコードの有効期間内" />
                  <outline text="パスコードが一致" />
                </outline>
                <outline text="クライアント側初期テーブル用データの作成" _note="trialはクライアント側に渡さないよう削除。logシートは授受対象外&#10;" />
                <outline text="accountsシートのtrial,lastSyncの書き換え" />
                <outline text="logへの記録" />
              </outline>
              <outline text="引数">
                <outline text="passcode {number} クライアント側で入力されたパスコード" />
              </outline>
              <outline text="戻り値">
                <outline text="result {number}" _note="0: 処理成功(パスコード一致)&#10;1: パスコード生成から10分以上経過、もう一度auth1からやり直し&#10;2: パスコード不一致(再試行可)&#10;3: パスコード不一致(再試行不可、凍結に移行)&#10;9: システム、その他エラー。message参照&#10;" />
                <outline text="message {string} エラーメッセージ。正常終了ならundefined" />
                <outline text="tables {Object} クライアント側初期テーブル用データの作成" _note="{領域名:以下メンバを持つオブジェクト}形式">
                  <outline text="constructor()の引数Obj.&lt;a href=&quot;https://workflowy.com/#/752c37c55bd4&quot;&gt;tables&lt;/a&gt;" />
                  <outline text="header {string[]} ヘッダ項目名のリスト。空欄不可" />
                  <outline text="data {Object[]} 行データオブジェクトの一次元配列" />
                  <outline text="2 Backlinks">
                    <outline text="&lt;a href=&quot;https://workflowy.com/#/561b163cd0d7&quot;&gt;クライアント側テーブル用データ&lt;/a&gt;" />
                    <outline text="&lt;a href=&quot;https://workflowy.com/#/561b163cd0d7&quot;&gt;クライアント側初期テーブル用データ&lt;/a&gt;の構成" />
                  </outline>
                </outline>
                <outline text="1 Backlink">
                  <outline text="auth2の&lt;a href=&quot;https://workflowy.com/#/5ed89bf06f52&quot;&gt;戻り値&lt;/a&gt;に基づきデータをセット" />
                </outline>
              </outline>
              <outline text="v.1.0.0 source" _note="/** auth2: 入力されたパスコードを検証、正当なら全ユーザ情報を返す&#10; * @param {Object} arg&#10; * ----- auth2特有設定 -----&#10; * @param {string|number} arg.passcode - 入力されたパスコード&#10; * ----- auth1,2共通 -----&#10; * @param {number} arg.entryNo - ユーザID&#10; * @param {SingleTable} arg.master - ユーザ情報シートのオブジェクト&#10; * @param {Object.&amp;lt;string,any&amp;gt;} arg.user - ユーザ情報&#10; * @param {Object} arg.conf - 設定値&#10; * @param {number} [arg.conf.bits=1024] - RSA鍵長。クライアント/サーバ両方に適用&#10; * @param {number} [arg.conf.maxTrial=3] - 最大試行回数(パスコード入力)&#10; * @param {number} [arg.conf.passcodeValidityPeriod=600000] - パスコードの有効期間。ミリ秒&#10; * @param {number} [arg.conf.expire=172800000] - クライアント側鍵の有効期間。既定値48時間&#10; * @param {number} [arg.conf.freezing=3600000] - 連続失敗した場合の凍結期間。ミリ秒。既定値1時間&#10; * @param {number} [arg.conf.authFlag=2] - auth1/auth2を実行可能な権限フラグ&#10; * @param {number} [arg.conf.passcodeDigit=6] - パスコードの桁数&#10; * @param {Object} arg.sheet - シート関係情報&#10; * @param {string} &lt;a href=&quot;http://arg.sheet.id&quot;&gt;arg.sheet.id&lt;/a&gt;='entryNo' - ユーザを特定するキーの欄名&#10; * @param {string} arg.sheet.CPkey='CPkey' - CPkeyを格納する欄名&#10; * @param {string} arg.sheet.trial='trial' - 試行情報を格納する欄名&#10; * @param {string} arg.sheet.auth='authority' - ユーザ権限を格納する欄名&#10; * &#10; * &#10; * &#10; * @param {string|number} arg.entryNo - ユーザID&#10; * @param {string|number} arg.passcode - 入力されたパスコード&#10; * @param {number} arg.expire - 有効期間(ミリ秒)&#10; * @param {SingleTable} master - ユーザ情報シートのオブジェクト&#10; * @returns &#10; * &#10; * なおIDに該当するユーザがシートに登録されているかは、前段階のencryptedQuery.response()内で検証されているため割愛。&#10; * &#10; * **パスコード正当性判断基準**&#10; * &#10; * - パスコード生成から10分以内&#10; * - パスコードが正しい&#10; * &#10; * **戻り値のデータ形式**&#10; * &#10; * - rv {Object}&#10; *   - status {number} 1:正当 0:不当だが再試行可 -1〜-8:不当、再試行不可 -9:システムエラー&#10; *   - message {string} エラーメッセージ(エラー時のみ)&#10; *   - header {string[]} 欄名の一覧&#10; *   - data {Object.&amp;lt;string,any&amp;gt;} 全ユーザ情報(master全行の{欄名:値})&#10; */&#10;function auth2(arg){&#10;  const v = {whois:'auth2',step:0,rv:{status:1},entryNo:Number(arg.entryNo),now:Date.now()};&#10;  console.log(`${v.whois} start.\narg=${stringify(arg)}`);&#10;  try {&#10;&#10;    v.step = 1; // パスコードの形式検証&#10;    if( isNaN(arg.passcode) ){&#10;      v.rv.status = 0;&#10;      v.rv.message = 'パスコードが数値ではありません';&#10;    } else {&#10;      v.passcode = Number(arg.passcode);&#10;      vlog(v,'passcode');&#10;&#10;      v.step = 2; // 有効期限の検証&#10;      arg.user[arg.sheet.trial] = JSON.parse(arg.user[arg.sheet.trial]);&#10;      vlog(arg.user,'trial',v);&#10;      if( (v.now - arg.user[arg.sheet.trial].created) &amp;gt; arg.conf.passcodeValidityPeriod ){&#10;        v.rv.status = -2;&#10;        v.rv.message = `パスコードの有効期限(${Math.round(arg.conf.passcodeValidityPeriod/60000)}分)が切れています`&#10;      } else {&#10;        v.step = 3; // パスコードの一致検証&#10;        if( arg.user[arg.sheet.trial].passcode === v.passcode ){&#10;          // OKの場合、スタッフ名簿とarg.masterシート全件を戻り値に追加&#10;          v.staff = new SingleTable('スタッフ名簿');&#10;          Object.assign(v.rv,{&#10;            status: 1,&#10;            header: arg.master.header,&#10;            data: JSON.parse(JSON.stringify(arg.master.data)),&#10;            staff: JSON.parse(JSON.stringify(v.staff.data)),&#10;            expire: v.now + arg.expire,&#10;          });&#10;          v.rv.data.forEach(x =&amp;gt; delete x.trial); // trial情報は削除&#10;        } else {&#10;          v.step = 4; // 再試行可否判断&#10;          v.rv.message = 'パスコードが一致しませんでした';&#10;          if( arg.user[arg.sheet.trial].result &amp;lt;= arg.conf.maxTrial ){&#10;            v.rv.status = 0;&#10;          } else {&#10;            v.rv.status = -3;&#10;            v.rv.message += `\n連続${arg.conf.maxTrial}回パスコード不一致のため、アカウントが凍結されます。`&#10;            + `\nシステム管理者に凍結解除を依頼するか、${Math.round(arg.conf.freezing/60000)}分以上の間隔を置いて再試行してください。`;&#10;          }&#10;        }&#10;      }&#10;    }&#10;    vlog(v,'rv');&#10;&#10;    (()=&amp;gt;{  v.step = 5; // シートのtrial欄を更新&#10;&#10;      v.step = 5.1; // trial情報を更新&#10;      arg.user[arg.sheet.trial].result = v.rv.status &amp;gt; 0 ? 0 : (arg.user[arg.sheet.trial].result + 1);&#10;      arg.user[arg.sheet.trial].log.unshift({&#10;        timestamp: v.now,&#10;        enterd   : arg.passcode,&#10;        status   : v.rv.status,&#10;      });&#10;&#10;      v.step = 5.2; // シートの試行情報を書き換え&#10;      v.dObj = {};&#10;      v.dObj[arg.sheet.trial] = JSON.stringify(arg.user[arg.sheet.trial]);&#10;      v.r = arg.master.update(v.dObj,{where:o=&amp;gt;o[&lt;a href=&quot;http://arg.sheet.id&quot;&gt;arg.sheet.id&lt;/a&gt;]==v.entryNo});&#10;      if( v.r instanceof Error ) throw v.r;&#10;&#10;    })();&#10;&#10;    v.step = 9; // 終了処理&#10;    console.log(`${v.whois} normal end.\nv.rv(${whichType(v.rv)})=${stringify(v.rv)}`);&#10;&#10;  } catch(e) {&#10;    v.rv.status = -9; // システムエラーは status = -9&#10;    v.rv.message = e.message;&#10;    e.message = `${v.whois} abnormal end at step.${v.step}\n${e.message}`;&#10;    console.error(`${e.message}\nv=${stringify(v)}`);&#10;  } finally {&#10;    return v.rv;&#10;  }&#10;}" />
            </outline>
            <outline text="append() : シートに新規レコードを追加" _note="更新系の処理は以下の手順で行う。&#10;①ローカル側に対象と更新データを渡す&#10;②対象と更新データをサーバ側に投げる(requestを呼び出す)&#10;③サーバ側更新結果をローカルのDBに反映">
              <outline text="概要">
                <outline text="対象テーブルにSingleTable.insert()を実行" />
                <outline text="logへの記録" />
              </outline>
              <outline text="引数">
                <outline text="arg {Object[]}">
                  <outline text="range {string} 範囲名" />
                  <outline text="data{Object[]} 追加する行オブジェクトの配列" />
                </outline>
              </outline>
              <outline text="戻り値">
                <outline text="success {Object[]} 追加された行オブジェクト" />
                <outline text="failure {Object[]} 追加に失敗した行オブジェクト" _note="失敗が無い場合でも空配列として作成" />
              </outline>
            </outline>
            <outline text="update() : シートの既存レコードを更新">
              <outline text="概要">
                <outline text="対象テーブルにSingleTable.update()を実行" />
                <outline text="logへの記録" />
              </outline>
              <outline text="引数">
                <outline text="arg {Object[]}">
                  <outline text="range {string} 範囲名" />
                  <outline text="selector {Object} 更新箇所の特定情報">
                    <outline text="key {string} キーとなる項目名" />
                    <outline text="value {any} キーの値" />
                  </outline>
                  <outline text="data {Object} 更新対象項目のオブジェクト" />
                </outline>
              </outline>
              <outline text="戻り値">
                <outline text="success {Object[]} 更新された行オブジェクト" />
                <outline text="failure {Object[]} 更新に失敗した行オブジェクト" />
              </outline>
            </outline>
            <outline text="delete() : シートの既存レコードを物理削除">
              <outline text="概要" />
              <outline text="引数" />
              <outline text="戻り値" />
            </outline>
            <outline text="encB64() : 日本語文字列を含め、base64にエンコード">
              <outline text="source" _note="/** encB64: 日本語文字列を含め、base64にエンコード&#10;  * @param {string} parts - 変換する日本語文字列&#10;  * @returns {string} base64エンコード文字列&#10;  */&#10;encB64(text){&#10;  return Utilities.base64Encode(text, Utilities.Charset.UTF_8);&#10;}" />
            </outline>
            <outline text="decB64() : base64を日本語文字列にデコード">
              <outline text="source" _note="/** decB64: base64を日本語文字列にデコード&#10;  * @param {string} text - base64文字列&#10;  * @param {string} charset='UTF-8'&#10;  * @returns {string} 復号された日本語文字列&#10;  */&#10;decB64(text, charset='UTF-8') {&#10;  return Utilities.newBlob(Utilities.base64Decode(text, Utilities.Charset.UTF_8)).getDataAsString();&#10;}" />
            </outline>
          </outline>
          <outline text="アカウント管理シート(user)の構成">
            <outline text="userId {string|number} ユーザ識別子(primaryKey)" />
            <outline text="name {string} ユーザの氏名" />
            <outline text="email {string} ユーザのメールアドレス(unique)" _note="複数アカウントでの同一メアド共有は不許可&#10;" />
            <outline text="phone {string} ユーザの電話番号" />
            <outline text="contact {string} ユーザの住所" />
            <outline text="note {string} 備考" />
            <outline text="CPkey {string} クライアント側公開鍵" />
            <outline text="CPkeyGenerated {string} クライアント側鍵ペアの生成日時" />
            <outline text="authority {JSON} シート毎のアクセス権限。&lt;code&gt;{シート名:raud文字列}&lt;/code&gt; 形式" _note="r:read, a:append, u:update, d:delete&#10;" />
            <outline text="lastRequest {string} 前回パスコード通知メール発行要求日時" _note="パスコード要求(client)&amp;gt;要求受領(server)&amp;gt;パスコード生成&amp;gt;通知メール送信の内、メール送信日時&#10;" />
            <outline text="trial {JSON} ログイン試行関連情報" _note="新規試行開始時にクリア&#10;">
              <outline text="passcode {number} 設定されたパスコード" />
              <outline text="log {Object[]} 試行履歴情報">
                <outline text="t {string} パスコード検証日時" />
                <outline text="v {number} ユーザが入力したパスコード" />
                <outline text="c {number} エラーコード" _note="01: アカウント凍結中(凍結解除後、再試行可)&#10;02: ログイン権限無し(authorityが空オブジェクト)&#10;03: CPkey有効期限切れ&#10;04: CPkey有効期間内なのに署名と登録CPkeyが一致しない&#10;05: パスコード有効期限切れ&#10;06: パスコード有効期限内なのにパスコード不一致&#10;99: その他(システムエラー他)" />
              </outline>
              <outline text="freeze {string} 凍結解除日時。通常undefined、凍結時にメンバ追加" />
            </outline>
            <outline text="lastLogin {string} 前回ログイン日時" />
            <outline text="lastSync {string} 前回同期日時" />
            <outline text="created {string} ユーザ登録日時" />
            <outline text="updated {string} 最終更新日時" />
            <outline text="deleted {string} 論理削除日時" />
          </outline>
        </outline>
        <outline text="class encryptedQueryToken">
          <outline text="メンバ">
            <outline text="userId {string|number} ユーザ識別子" _note="公開鍵交換後は暗号化＋署名する" />
            <outline text="request {Object}">
              <outline text="CPkey {string} クライアント側公開鍵" _note="SPkeyは最初の復号時に署名として取得" />
            </outline>
            <outline text="response {Object} SpreadDBの&lt;a href=&quot;https://workflowy.com/#/a05bf5f0f7c2&quot;&gt;戻り値&lt;/a&gt;" />
            <outline text="ぼつ">
              <outline text="SPkey {string} サーバ側公開鍵" />
              <outline text="lastSync {string}='1970-01-01' 前回同期日時。初期値はundefined" _note="要、サーバ側管理(なりすまし抑止)" />
              <outline text="keyGenerate {string} クライアント側鍵ペアの生成日時" _note="要、サーバ側管理(なりすまし抑止)" />
            </outline>
          </outline>
        </outline>
        <outline text="" />
        <outline text="ゴミ箱">
          <outline text="setup() : DocumentPropertiesに当該Prjで使用する設定情報をセット" _note="上記「DocumentPropertiesの構成」に記載した項目の他、encryptedQuery以外のクラス・関数で使用する項目を含む。&#10;">
            <outline text="【未完】source" _note="/** setup: DocumentPropertiesに設定情報を保存&#10; * - 【プロジェクト毎にソースを修正】して使用のこと&#10; * - Qiita [crypticoでPure JavaScriptによる公開鍵暗号を用いるメモ](&lt;a href=&quot;https://qiita.com/miyanaga/items/8692d0742a49fb37a6da&quot;&gt;https://qiita.com/miyanaga/items/8692d0742a49fb37a6da&lt;/a&gt;)&#10; */&#10;function setup(){&#10;  const v = {whois:'setup',step:0,rv:null,conf:{}};&#10;  console.log(`${v.whois} start.`);&#10;  try {&#10;&#10;    // step.1 各種設定値をv.configにセット&#10;&#10;    v.step = 1.1; // 鍵ペアの作成&#10;    v.password = createPassword();&#10;    if( v.password instanceof Error ) throw v.password;&#10;    v.bits = 1024;&#10;    v.key = cryptico.generateRSAKey(v.password,v.bits);&#10;&#10;    v.step = 1.2; // オブジェクトv.configに各種設定値をセット&#10;    v.config = {&#10;      keyGenerate: Date.now(),&#10;      keyLength: v.bits,&#10;      SPkey: cryptico.publicKeyString(v.key),&#10;      SSkey: JSON.stringify(v.key.toJSON()),  // 文字列化された秘密鍵&#10;    };&#10;&#10;    v.step = 2; // DocumentPropertiesへの保存&#10;    PropertiesService.getDocumentProperties().setProperty('config',JSON.stringify(v.config));&#10;&#10;    v.step = 3; // 保存内容の確認、終了処理&#10;    console.log(`${v.whois} normal end.\n${PropertiesService.getDocumentProperties().getProperty('config')}`);&#10;&#10;  } catch(e) {&#10;    e.message = `${v.whois} abnormal end at step.${v.step}\n${e.message}`;&#10;    console.error(`${e.message}\nv=${stringify(v)}`);&#10;  }&#10;}" />
          </outline>
        </outline>
      </outline>
      <outline text="[旧版]SpreadDB 1.1.0">
        <outline text="typeDefs">
          <outline text="メンバ(pv)">
            <outline text="whois {string} 'SpreadDb'固定" />
            <outline text="&lt;a href=&quot;https://workflowy.com/#/83fc9661f4ca&quot;&gt;opt {Object}&lt;/a&gt; 起動時オプション。&lt;code&gt;&lt;a href=&quot;http://pv.opt.xxx&quot;&gt;pv.opt.xxx&lt;/a&gt;&lt;/code&gt; として保存" />
            <outline text="内部設定項目(optと同列に配置)">
              <outline text="spread {Spread} スプレッドシートオブジェクト" />
              <outline text="table {Object.&amp;lt;string,&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;&amp;gt;} スプレッドシート上の各テーブル(領域)の情報" />
              <outline text="log {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;[]}=[] 更新履歴シートオブジェクト" />
            </outline>
          </outline>
          <outline text="sdbTable {Object} テーブルの管理情報">
            <outline text="name {string} テーブル名(範囲名)" />
            <outline text="account {string} 更新者のアカウント(識別子)" />
            <outline text="sheet {&lt;a href=&quot;https://developers.google.com/apps-script/reference/spreadsheet/sheet?hl=ja&quot;&gt;Sheet&lt;/a&gt;} スプレッドシート内の操作対象シート(ex.&quot;master&quot;シート)" />
            <outline text="schema {&lt;a href=&quot;https://workflowy.com/#/1807783e0064&quot;&gt;sdbSchema&lt;/a&gt;} シートの項目定義" />
            <outline text="values {Object[]} 行オブジェクトの配列。&lt;code&gt;{項目名:値,..}&lt;/code&gt; 形式" />
            <outline text="header {string[]} 項目名一覧(ヘッダ行)" />
            <outline text="notes {string[]} ヘッダ行のメモ" />
            <outline text="colnum {number} データ領域の列数" />
            <outline text="rownum {number} データ領域の行数(ヘッダ行は含まず)" />
            <outline text="7 Backlinks">
              <outline text="genTable() : &lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;オブジェクトを生成" />
              <outline text="table {&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;} 操作対象のテーブル管理情報" />
              <outline text="table {&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;} 操作対象のテーブル管理情報" />
              <outline text="table {&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;} 操作対象のテーブル管理情報" />
              <outline text="table {&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;} 操作対象のテーブル管理情報" />
              <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;}" />
              <outline text="table {Object.&amp;lt;string,&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;&amp;gt;} スプレッドシート上の各テーブル(領域)の情報" />
            </outline>
          </outline>
          <outline text="sdbSchema {Object} テーブルの構造情報">
            <outline text="cols {&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;[]} 項目定義オブジェクトの配列" />
            <outline text="primaryKey {string}='id' 一意キー項目名" />
            <outline text="unique {Object.&amp;lt;string, any[]&amp;gt;} primaryKeyおよびunique属性項目の管理情報" _note="メンバ名はprimaryKey/uniqueの項目名&#10;" />
            <outline text="auto_increment {Object.&amp;lt;string,Object&amp;gt;} auto_increment属性項目の管理情報" _note="メンバ名はauto_incrementの項目名&#10;">
              <outline text="start {number} 開始値" />
              <outline text="step {number} 増減値" />
              <outline text="current {number} 現在の最大(小)値" _note="currentはsdbTableインスタンスで操作する。" />
            </outline>
            <outline text="defaultRow {Object|function} 既定値項目で構成されたオブジェクト。appendの際のプロトタイプ" />
            <outline text="3 Backlinks">
              <outline text="genSchema() : &lt;a href=&quot;https://workflowy.com/#/1807783e0064&quot;&gt;sdbSchema&lt;/a&gt;オブジェクトを生成" />
              <outline text="schema {&lt;a href=&quot;https://workflowy.com/#/1807783e0064&quot;&gt;sdbSchema&lt;/a&gt;}" />
              <outline text="schema {&lt;a href=&quot;https://workflowy.com/#/1807783e0064&quot;&gt;sdbSchema&lt;/a&gt;} シートの項目定義" />
            </outline>
          </outline>
          <outline text="sdbColumn {Object} 項目の構造情報">
            <outline text="name {string} 項目名" />
            <outline text="type {string} データ型。string,number,boolean,Date,JSON,UUID" />
            <outline text="format {string} 表示形式。type=Dateの場合のみ指定" />
            <outline text="options {string} 取り得る選択肢(配列)のJSON表現" _note="ex. [&quot;未入場&quot;,&quot;既収&quot;,&quot;未収&quot;,&quot;無料&quot;]" />
            <outline text="default {function} 既定値を取得する関数。引数は当該行オブジェクト" _note="指定の際は必ず&lt;code&gt;{〜}&lt;/code&gt; で囲み、return文を付与のこと。&#10;ex.&lt;code&gt;o =&amp;gt; {return toLocale(new Date())}&lt;/code&gt; &#10;" />
            <outline text="primaryKey {boolean}=false 一意キー項目ならtrue" />
            <outline text="unique {boolean}=false primaryKey以外で一意な値を持つならtrue" />
            <outline text="auto_increment {bloolean|null|number|number[]}=false 自動採番項目" _note="null ⇒ 自動採番しない&#10;boolean ⇒ true:自動採番する(基数=1,増減値=1)、false:自動採番しない&#10;number ⇒ 自動採番する(基数=指定値,増減値=1)&#10;number[] ⇒ 自動採番する(基数=添字0,増減値=添字1)&#10;object ⇒ {start:m,step:n}形式" />
            <outline text="suffix {string} &quot;not null&quot;等、上記以外のSQLのcreate table文のフィールド制約" />
            <outline text="note {string} 本項目に関する備考。create table等では使用しない" />
            <outline text="8 Backlinks">
              <outline text="schema {Object.&amp;lt;string,&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;[]&amp;gt;} schemaで取得した{テーブル名：項目定義オブジェクトの配列}形式のオブジェクト" />
              <outline text="cols {&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;[]} - 新規作成シートの項目定義オブジェクトの配列" _note="command='create'のみで使用" />
              <outline text="arg {string|&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;} シート上のメモの文字列またはsdbColumn" />
              <outline text="column {&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;} 項目の定義情報" />
              <outline text="[cols] {&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;[]} - 新規作成シートの項目定義オブジェクトの配列" />
              <outline text="genColumn(): &lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;オブジェクトを生成" />
              <outline text="戻り値 {Object.&amp;lt;string,&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;[]&amp;gt;} {テーブル名：項目定義オブジェクトの配列}形式" />
              <outline text="cols {&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;[]} 項目定義オブジェクトの配列" />
            </outline>
          </outline>
          <outline text="sdbLog {Object} 更新履歴オブジェクト" _note="行頭[〜]はシート上の列番号＋列記号">
            <outline text="[01A] id {UUID}=Utilities.getUuid() 一意キー項目" />
            <outline text="[02B] timestamp {string}=toLocale(new Date()) 更新日時" />
            <outline text="[03C] account {string|number} uuid等、更新者の識別子" />
            <outline text="[04D] range {string} 更新対象テーブル名" />
            <outline text="[05E] action {string} 操作内容。command系内部関数名のいずれか" />
            <outline text="[06F] argument {string} 操作関数に渡された引数" />
            <outline text="[07G] isErr {boolean} true:追加・更新が失敗" />
            <outline text="[08H] message {string} エラーメッセージ" />
            <outline text="[09I] before {JSON} 更新前の行データオブジェクト(JSON)" />
            <outline text="[10J] after {JSON} 更新後の行データオブジェクト(JSON)" _note="selectの場合はここに格納" />
            <outline text="[11K] diff {JSON} 追加の場合は行オブジェクト、更新の場合は差分情報。{項目名：[更新前,更新後],...}形式" />
            <outline text="7 Backlinks">
              <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;}" />
              <outline text="genLog() : &lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;オブジェクトを生成" />
              <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;[]}" />
              <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;[]}" />
              <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;[]}" />
              <outline text="log {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;[]}=[] 更新履歴シートオブジェクト" />
              <outline text="log {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;[]} 更新履歴" _note="update,deleteで該当無しの場合、log.length===0&#10;" />
            </outline>
          </outline>
        </outline>
        <outline text="概要">
          <outline text="スプレッドシートを凍結" />
          <outline text="queryで渡された操作要求を順次処理">
            <outline text="権限確認後、&lt;a href=&quot;https://workflowy.com/#/a4ffcd522269&quot;&gt;command系内部関数&lt;/a&gt;の呼び出し" />
          </outline>
          <outline text="スプレッドシートの凍結解除" />
        </outline>
        <outline text="引数">
          <outline text="query {Object[]} 操作要求の内容" _note="以下、行頭の「crudas」はコマンドの種類により必要となるパラメータ。'r'はselect(read)&#10;">
            <outline text="table {string|string[]} 操作対象テーブル名" _note="全commandで使用。command='schema'の場合、取得対象テーブル名またはその配列&#10;" />
            <outline text="command {string} 操作名" _note="全commandで使用。create/select/update/delete/append/schema" />
            <outline text="cols {&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;[]} - 新規作成シートの項目定義オブジェクトの配列" _note="command='create'のみで使用" />
            <outline text="values {Object[]|Array[]} - 新規作成シートに書き込む初期値" _note="command='create'のみで使用" />
            <outline text="&lt;a href=&quot;https://workflowy.com/#/cde13ea2b6d2&quot;&gt;where&lt;/a&gt; {Object|Function|string} 対象レコードの判定条件" _note="command='select','update','delete'で使用" />
            <outline text="&lt;a href=&quot;https://workflowy.com/#/18ae7059355f&quot;&gt;record&lt;/a&gt; {Object|Function} 追加・更新する値" _note="command='update','append'で使用" />
            <outline text="2 Backlinks">
              <outline text="&lt;a href=&quot;https://workflowy.com/#/ceffd9e40da5&quot;&gt;query {Object} 操作要求の内容&lt;/a&gt;" />
              <outline text="query {Object} 引数として渡された&lt;a href=&quot;https://workflowy.com/#/ceffd9e40da5&quot;&gt;query&lt;/a&gt;のコピー" />
            </outline>
          </outline>
          <outline text="opt {Object}={} オプション">
            <outline text="userId {string}='guest' ユーザの識別子" _note="指定する場合、必ずuserAuthも併せて指定" />
            <outline text="userAuth {Object.&amp;lt;string,string&amp;gt;}={} テーブル毎のアクセス権限。&lt;code&gt;{シート名:rwdos文字列}&lt;/code&gt; 形式" _note="r:select(read), w:write, d:delete, s:schema, o:own only(指定シートのprimaryKeyがuserIdと一致するレコードのみ参照・変更可。削除不可)。追加はwがあれば可&#10;&#10;o(own record only)の指定は他の'rwdos'に優先、'o'のみの指定と看做す(rwds指定は有っても無視)。&#10;また検索対象テーブルはprimaryKey要設定、検索条件もprimaryKeyの値のみ指定可&#10;read/writeは自分のみ可、delete/schemaは実行不可&#10;" />
            <outline text="log {string}='log' 更新履歴テーブル名" _note="nullの場合、ログ出力は行わない。領域名 &amp;gt; A1記法 &amp;gt; シート名の順に解釈" />
            <outline text="maxTrial {number}=5 テーブル更新時、ロックされていた場合の最大試行回数" />
            <outline text="interval {number}=10000 テーブル更新時、ロックされていた場合の試行間隔(ミリ秒)" />
            <outline text="guestAuth {Object.&amp;lt;string,string&amp;gt;} ゲストに付与する権限。&lt;code&gt;{シート名:rwdos文字列}&lt;/code&gt; 形式" />
            <outline text="adminId {string}='Administrator' 管理者として扱うuserId" _note="管理者は全てのシートの全権限を持つ&#10;" />
            <outline text="2 Backlinks">
              <outline text="&lt;a href=&quot;https://workflowy.com/#/83fc9661f4ca&quot;&gt;opt {Object}&lt;/a&gt; 起動時オプション。&lt;code&gt;&lt;a href=&quot;http://pv.opt.xxx&quot;&gt;pv.opt.xxx&lt;/a&gt;&lt;/code&gt; として保存" />
              <outline text="&lt;a href=&quot;https://workflowy.com/#/83fc9661f4ca&quot;&gt;opt {Object}={} オプション&lt;/a&gt;" />
            </outline>
          </outline>
        </outline>
        <outline text="戻り値 {Object[]} 以下のメンバを持つオブジェクトの配列">
          <outline text="query {Object} 引数として渡された&lt;a href=&quot;https://workflowy.com/#/ceffd9e40da5&quot;&gt;query&lt;/a&gt;のコピー" />
          <outline text="isErr {boolean}=false 正常終了ならfalse" _note="一つのqueryで複数の処理を指示した場合(ex.複数レコードの追加)、いずれか一つでもエラーになればisErrはtrueとなる。" />
          <outline text="message {string} エラーメッセージ。isErr==trueの場合のみ。" />
          <outline text="row {Object[]}=null selectの該当行オブジェクトの配列" _note="該当無しの場合、row.length===0" />
          <outline text="schema {Object.&amp;lt;string,&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;[]&amp;gt;} schemaで取得した{テーブル名：項目定義オブジェクトの配列}形式のオブジェクト" />
          <outline text="log {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;[]} 更新履歴" _note="update,deleteで該当無しの場合、log.length===0&#10;" />
        </outline>
        <outline text="内部関数 - 非command系">
          <outline text="constructor() : メンバの初期値設定、更新履歴の準備">
            <outline text="概要">
              <outline text="メンバの初期値設定" />
              <outline text="「更新履歴」の準備" />
            </outline>
            <outline text="引数">
              <outline text="&lt;a href=&quot;https://workflowy.com/#/ceffd9e40da5&quot;&gt;query {Object} 操作要求の内容&lt;/a&gt;" />
              <outline text="&lt;a href=&quot;https://workflowy.com/#/83fc9661f4ca&quot;&gt;opt {Object}={} オプション&lt;/a&gt;" />
            </outline>
          </outline>
          <outline text="genTable() : &lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;オブジェクトを生成">
            <outline text="引数">
              <outline text="arg {Object}">
                <outline text="name {string} - テーブル名" />
                <outline text="[cols] {&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;[]} - 新規作成シートの項目定義オブジェクトの配列" />
                <outline text="[values] {Object[]|Array[]} - 新規作成シートに書き込む初期値" />
              </outline>
              <outline text="1 Backlink">
                <outline text="引数 : genTable()の&lt;a href=&quot;https://workflowy.com/#/4976c8818628&quot;&gt;引数&lt;/a&gt;" />
              </outline>
            </outline>
            <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;}" />
          </outline>
          <outline text="genSchema() : &lt;a href=&quot;https://workflowy.com/#/1807783e0064&quot;&gt;sdbSchema&lt;/a&gt;オブジェクトを生成">
            <outline text="引数">
              <outline text="arg {Object}">
                <outline text="cols {sdbColumn[]} - 項目定義オブジェクトの配列" />
                <outline text="header {string[]} - ヘッダ行のシートイメージ(=項目名一覧)" />
                <outline text="notes {string[]} - 項目定義メモの配列" />
                <outline text="values {Object[]} - 初期データとなる行オブジェクトの配列" />
              </outline>
            </outline>
            <outline text="戻り値 {Object}">
              <outline text="schema {&lt;a href=&quot;https://workflowy.com/#/1807783e0064&quot;&gt;sdbSchema&lt;/a&gt;}" />
              <outline text="notes {string[]} ヘッダ行に対応したメモ" />
            </outline>
          </outline>
          <outline text="genColumn(): &lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;オブジェクトを生成">
            <outline text="引数">
              <outline text="arg {string|&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;} シート上のメモの文字列またはsdbColumn" />
            </outline>
            <outline text="戻り値 {Object}">
              <outline text="column {&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;} 項目の定義情報" />
              <outline text="note {string} シート上のメモの文字列" />
            </outline>
          </outline>
          <outline text="genLog() : &lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;オブジェクトを生成">
            <outline text="概要" />
            <outline text="引数">
              <outline text="arg {Object.&amp;lt;string,any&amp;gt;} sdbLogに個別設定するメンバ名と値" />
            </outline>
            <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;}" />
          </outline>
          <outline text="convertRow() : シートイメージと行オブジェクトの相互変換" />
          <outline text="functionalize() : where句のオブジェクト・文字列を関数化">
            <outline text="引数" />
            <outline text="戻り値" />
          </outline>
        </outline>
        <outline text="内部変数 - command系">
          <outline text="createTable() : データから新規テーブルを生成" _note="管理者のみ実行可">
            <outline text="引数 : genTable()の&lt;a href=&quot;https://workflowy.com/#/4976c8818628&quot;&gt;引数&lt;/a&gt;" />
            <outline text="戻り値 {sdbLog}" />
          </outline>
          <outline text="selectRow() : テーブルから条件に合致する行を抽出">
            <outline text="概要" />
            <outline text="引数">
              <outline text="arg {Object|Object[]}">
                <outline text="table {&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;} 操作対象のテーブル管理情報" />
                <outline text="where {Object|Function|string} 対象レコードの判定条件" _note="- Object ⇒ {キー項目名:キー項目の値}形式で、key:valueに該当するレコードを更新&#10;- function ⇒ 行オブジェクトを引数に対象ならtrueを返す関数で、trueが返されたレコードを更新&#10;- string&#10;  - 無名関数またはアロー関数のソース文字列 ⇒ new Functionで関数化。&lt;code&gt;{〜}&lt;/code&gt; で囲みreturn文を付与。&#10;  - その他 ⇒ 項目定義で&quot;primaryKey&quot;を指定した項目の値&#10;- その他(Object,function,string以外) ⇒ 項目定義で&quot;primaryKey&quot;を指定した項目の値&#10;">
                  <outline text="3 Backlinks">
                    <outline text="&lt;a href=&quot;https://workflowy.com/#/cde13ea2b6d2&quot;&gt;where&lt;/a&gt; {Object|Function|string} 対象レコードの判定条件" _note="command='select','update','delete'で使用" />
                    <outline text="&lt;a href=&quot;https://workflowy.com/#/cde13ea2b6d2&quot;&gt;where {Object|Function|string} 対象レコードの判定条件&lt;/a&gt;" />
                    <outline text="&lt;a href=&quot;https://workflowy.com/#/cde13ea2b6d2&quot;&gt;where {Object|Function|string} 対象レコードの判定条件&lt;/a&gt;" />
                  </outline>
                </outline>
              </outline>
            </outline>
            <outline text="戻り値 {Object[]} 該当行オブジェクト" _note="抽出された行オブジェクトはafterに出力。セルの最大文字数は50,000なので、呼出元には抽出結果(行オブジェクトの配列)afterをJSON.parseして戻す&#10;" />
          </outline>
          <outline text="updateRow() : テーブルを更新">
            <outline text="概要" />
            <outline text="引数">
              <outline text="arg {Object}" _note="argの配列は使用しない。同一テーブルでも複数の条件で更新する場合、SpreadDb.arg.query自体を別オブジェクトで用意する">
                <outline text="table {&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;} 操作対象のテーブル管理情報" />
                <outline text="&lt;a href=&quot;https://workflowy.com/#/cde13ea2b6d2&quot;&gt;where {Object|Function|string} 対象レコードの判定条件&lt;/a&gt;" />
                <outline text="record {Object|string|Function} 更新する値" _note="record句の指定方法&#10;- Object ⇒ appendなら行オブジェクト、updateなら{更新対象項目名:セットする値}&#10;- string ⇒ 上記Objectに変換可能なJSON文字列&#10;- Function ⇒ 行オブジェクトを引数に、上記Objectを返す関数&#10;  【例】abc欄にfuga+hogeの値をセットする : {func: o=&amp;gt;{return {abc:(o.fuga||0)+(o.hoge||0)}}}">
                  <outline text="1 Backlink">
                    <outline text="&lt;a href=&quot;https://workflowy.com/#/18ae7059355f&quot;&gt;record&lt;/a&gt; {Object|Function} 追加・更新する値" _note="command='update','append'で使用" />
                  </outline>
                </outline>
              </outline>
            </outline>
            <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;[]}" />
          </outline>
          <outline text="appendRow() : テーブルに新規行を追加">
            <outline text="概要" />
            <outline text="引数">
              <outline text="arg {Object|Object[]}">
                <outline text="table {&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;} 操作対象のテーブル管理情報" />
                <outline text="record {Object|Object[]} 追加する行オブジェクト" />
              </outline>
            </outline>
            <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;[]}" />
          </outline>
          <outline text="deleteRow() : テーブルから条件に合致する行を削除">
            <outline text="概要" />
            <outline text="引数">
              <outline text="arg {Object|Object[]}">
                <outline text="table {&lt;a href=&quot;https://workflowy.com/#/20e32e8d7cef&quot;&gt;sdbTable&lt;/a&gt;} 操作対象のテーブル管理情報" />
                <outline text="&lt;a href=&quot;https://workflowy.com/#/cde13ea2b6d2&quot;&gt;where {Object|Function|string} 対象レコードの判定条件&lt;/a&gt;" />
              </outline>
            </outline>
            <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/527c4b49ce41&quot;&gt;sdbLog&lt;/a&gt;[]}" />
          </outline>
          <outline text="getSchema() : 指定されたテーブルの構造情報を取得">
            <outline text="概要" />
            <outline text="引数">
              <outline text="arg {string|string[]} 取得対象テーブル名" />
            </outline>
            <outline text="戻り値 {Object.&amp;lt;string,&lt;a href=&quot;https://workflowy.com/#/c32e233a6008&quot;&gt;sdbColumn&lt;/a&gt;[]&amp;gt;} {テーブル名：項目定義オブジェクトの配列}形式" />
          </outline>
          <outline text="1 Backlink">
            <outline text="権限確認後、&lt;a href=&quot;https://workflowy.com/#/a4ffcd522269&quot;&gt;command系内部関数&lt;/a&gt;の呼び出し" />
          </outline>
        </outline>
        <outline text="注意事項">
          <outline text="関数での抽出条件・値の指定時の制約" _note="default(sdbColumn), where, record(update他)では関数での指定を可能にしている。&#10;これらをセル・メモで保存する場合、文字列に変換する必要があるが、以下のルールで対応する。&#10;&#10;- 引数は行オブジェクトのみ(引数は必ず一つ)&#10;- 関数に復元する場合`new Function('o',[ロジック部分文字列])で関数化&#10;  - 必ず&quot;{〜}&quot;で囲み、return文を付ける&#10;" />
          <outline text="権限によるアクセス制限(rwdos)" _note="r:read, w:write, d:delete, o:own, s:schema + c:createの略。コマンド毎に以下の権限が必要になる。&#10;&#10;create(c): テーブル生成。管理者のみ実行可&#10;select(r): 参照&#10;update(rw): 更新&#10;append(w): 追加&#10;delete(d): 削除&#10;schema(s): テーブル管理情報の取得&#10;&#10;特殊権限'o' : イベント申込情報等、本人以外の参照・更新を抑止するためのアクセス権限。&#10;- `userAuth:{シート名:o}`が指定された場合、当該シートのprimaryKey=userIdとなっているレコードのみ'r','w'可と看做す。&#10;- 'o'指定が有るシートのアクセス権として'rwds'が指定されていても'o'のみ指定されたと看做す&#10;- 'o'指定でselect/updateする場合、where句は無視され自情報に対する処理要求と看做す&#10;  ex. userId=2の人がuserId=1の人の氏名の更新を要求 ⇒ userId=2の氏名が更新される&#10;  SpreadDb(&#10;    {table:'camp2024',command:'update',where:1,record:{'申込者氏名':'テスト'}},&#10;    {userId:2,userAuth:{camp2024:'o'}}&#10;  ); // -&amp;gt; userId=2の氏名が「テスト」に&#10;" />
        </outline>
      </outline>
      <outline text="workflowy">
        <outline text="typedefs">
          <outline text="opmlXML {Object} require('xml-js').xml2json()によるopml処理により生成されるオブジェクト" _note="&lt;a href=&quot;https://www.npmjs.com/package/xml-js&quot;&gt;https://www.npmjs.com/package/xml-js&lt;/a&gt;">
            <outline text="declaration {Object}">
              <outline text="attributes {Object}">
                <outline text="version {string} XMLバージョン" />
              </outline>
            </outline>
            <outline text="elements {Object[]} head,body他の子要素" />
          </outline>
          <outline text="opmlObj {Object} opmlの一行分のオブジェクト">
            <outline text="type {string} &quot;element&quot;固定" />
            <outline text="name {string} タグ名。&quot;outline&quot;のみ対象とする" />
            <outline text="elements {opmlObj[]} 子要素となるOPML一行分のオブジェクト" />
            <outline text="attributes {Object}">
              <outline text="text {striing} 表題のinnerHTML" _note="- 逆参照は&quot;n Backlinks&quot;" />
              <outline text="_note {string} ノートのinnerHTML" _note="- 改行は'\n'&#10;&#10;" />
            </outline>
          </outline>
        </outline>
        <outline text="テスト用サンプル">
          <outline text="No.1" _note="No.1のノート&#10;- 項目1&#10;- 項目2">
            <outline text="No.1.1" _note="ノート内で&lt;a href=&quot;https://workflowy.com/#/a0376dbc8b20&quot;&gt;リンク&lt;/a&gt;を張ってみた" />
            <outline text="No.1.2">
              <outline text="2 Backlinks">
                <outline text="No.1.1" _note="ノート内で&lt;a href=&quot;https://workflowy.com/#/a0376dbc8b20&quot;&gt;リンク&lt;/a&gt;を張ってみた" />
                <outline text="&lt;a href=&quot;https://workflowy.com/#/a0376dbc8b20&quot;&gt;No.1.2&lt;/a&gt;" />
              </outline>
            </outline>
          </outline>
          <outline text="No.2。&lt;b&gt;太文字&lt;/b&gt;と&lt;span class=&quot;colored c-red&quot;&gt;赤文字&lt;/span&gt;を使用">
            <outline text="&lt;a href=&quot;https://workflowy.com/#/a0376dbc8b20&quot;&gt;No.1.2&lt;/a&gt;" />
          </outline>
          <outline text="No.3 h1指定" />
        </outline>
      </outline>
      <outline text="saveSpread() : 指定スプレッドシートから各種属性情報を取得、Google Diverのスプレッドシートと同じフォルダにzip形式圧縮されたJSONとして保存" _note="本関数はGASの制約「実行時間は6分以内」に係る場合があるので、処理が5分を超えた段階で終了し、自関数をタイマー起動するよう設定&#10;">
        <outline text="概要">
          <outline text="変数'v'に設定情報や属性情報取得関数を定義">
            <outline text="属性情報">
              <outline text="propKey {string}='saveSpread' ScriptPropertyのキー名" _note="本関数実行時に一意に特定される必要があるため、対象シート名や実行日時等を含まない固定文字列を設定" />
              <outline text="start {number}=Date.now() saveSpread開始日時(UNIX時刻)" />
              <outline text="elapsLimit {number}=300000 一処理当たりの制限時間(5分)" />
              <outline text="executionLimit {number}=100 処理を分割した場合の最大処理数" />
            </outline>
            <outline text="getSpread() : フォルダ・ファイル関連、スプレッドシート関連情報を取得" />
            <outline text="scan() : 属性情報が二次元の場合、一行毎に制限時間をチェックしながら文字列化" />
            <outline text="getProp {Object.&amp;lt;string,function&amp;gt;} : シートの各属性情報取得関数群">
              <outline text="各関数の引数: arg {Object}">
                <outline text="sheet {Sheet} 処理対象とするシートオブジェクト" />
                <outline text="dr {Range} sheetの内、データが存在する範囲(getDataRange())" />
                <outline text="[src] {Object[][]} v.scan()に渡す二次元の属性情報。" _note="ex. arg.src = arg.dr.getFontColorObjects()" />
                <outline text="[dst] {Object[][]} v.scan()に渡す前回処理結果" _note="前回途中で処理が中断した場合、続きを追加できるようにscanに渡す" />
                <outline text="[func] {function} v.scan()に渡す個別セルの属性情報取得関数" />
              </outline>
            </outline>
            <outline text="その他変数vの主要メンバ" _note="※横断的に使用するもののみ列挙&#10;">
              <outline text="conf {Object} 進捗状況。処理未完の場合、&lt;a href=&quot;https://workflowy.com/#/89875a6cf5f6&quot;&gt;PropertyService&lt;/a&gt;に保存" />
              <outline text="spread {Spreadsheet} 対象のスプレッドシートオブジェクト" />
              <outline text="srcFile {File} 対象のスプレッドシートのファイルオブジェクト" />
              <outline text="dstFile {File} 分析結果を保存するJSON(zip)のファイルオブジェクト" />
              <outline text="data {Object} 分析結果のオブジェクト" _note="{getSpreadの結果＋getPropの結果}" />
              <outline text="sheetName {string} 現在処理中のシート名" />
              <outline text="propName {string} 現在処理中の属性名" />
              <outline text="folder {Folder} 処理対象スプレッドシートが存在するフォルダオブジェクト" />
            </outline>
          </outline>
        </outline>
        <outline text="引数">
          <outline text="arg {string|boolean} セーブ対象スプレッドシートのIDまたはfalse(強制停止)" />
        </outline>
        <outline text="PropertyService">
          <outline text="complete {boolean} 完了したらtrue" />
          <outline text="count {number} 実行回数" _note="処理時間が5分を超え、分割実行の都度インクリメント" />
          <outline text="SpreadId {string} セーブ対象のスプレッドシートのID" />
          <outline text="sheetList {string[]} セーブ対象スプレッドシートのシート名一覧" />
          <outline text="propList {string[]} 出力するシート属性名の一覧。ex.&lt;code&gt;Values&lt;/code&gt; ,&lt;code&gt;Notes&lt;/code&gt; " />
          <outline text="next {Object} 次に処理対象となるsheetList,propListの添字">
            <outline text="sheet {number} sheetList内で次に処理対象とするシート名の添字" />
            <outline text="prop {number} propList内で次に処理対象とする属性名の添字" />
            <outline text="row {number} 次に処理対象とする行番号(0オリジン)" />
          </outline>
          <outline text="fileId {string} 出力先ファイル(zip)のファイルID" />
          <outline text="2 Backlinks">
            <outline text="conf {Object} 進捗状況。処理未完の場合、&lt;a href=&quot;https://workflowy.com/#/89875a6cf5f6&quot;&gt;PropertyService&lt;/a&gt;に保存" />
            <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/89875a6cf5f6&quot;&gt;PropertyService&lt;/a&gt;} ※completeで完了しているか判断" />
          </outline>
        </outline>
        <outline text="戻り値 {&lt;a href=&quot;https://workflowy.com/#/89875a6cf5f6&quot;&gt;PropertyService&lt;/a&gt;} ※completeで完了しているか判断" />
      </outline>
      <outline text="embedRecursively 1.2.0">
        <outline text="はじめに">
          <outline text="開発の動機">
            <outline text="core.jsとpipe.jsの一本化" />
            <outline text="JavsScriptソースのclass挿入時、メソッドの1行目の空白が無視されるバグ修正" />
            <outline text="挿入指定文字列前のインデントを有効化" />
          </outline>
          <outline text="呼出元の挿入指示文字列" _note="- 「::(パス)::」 ⇒ 該当部分をパスで指定されたファイルの内容で置換&#10;- 「::(メモ[+])::(パス)::」 ⇒ 子文書の内容についてのメモ。あくまで備忘であり、使用されない。&amp;lt;br&amp;gt;&#10;  末尾に'+'が無い場合、子文書のルート要素を削除する。&amp;lt;br&amp;gt;&#10;  '+'が有った場合、子文書のルート要素を挿入場所の1レベル下の要素として挿入する。&#10;&#10;「ルート要素」とは、被挿入文書の最高レベルの章題が単一だった場合、その章題。&#10;複数だった場合はルート要素とは看做さない。&#10;" />
          <outline text="使用例" _note="1. 挿入指定文字列でメモ有り・子文書ルート指定あり&#10;&amp;lt;!--::test11+::$test/&lt;a href=&quot;http://ooChild.md&quot;&gt;ooChild.md&lt;/a&gt;::--&amp;gt;&#10;&#10;2. 挿入指定文字列でメモ有り・子文書ルート指定なし&#10;&amp;lt;!--::test21::$test/&lt;a href=&quot;http://ooChild.md&quot;&gt;ooChild.md&lt;/a&gt;::--&amp;gt;&#10;&#10;3. 挿入指定文字列でメモなし・子文書ルート指定あり&#10;&amp;lt;!--::+::$test/&lt;a href=&quot;http://ooChild.md&quot;&gt;ooChild.md&lt;/a&gt;::--&amp;gt;&#10;&#10;4. 挿入指定文字列でパスのみ指定&#10;&amp;lt;!--::$test/&lt;a href=&quot;http://ooChild.md&quot;&gt;ooChild.md&lt;/a&gt;::--&amp;gt;" />
          <outline text="変更履歴">
            <outline text="rev 1.0.0 2024/03/29 初版" />
            <outline text="rev 1.1.0 2024/04/08">
              <outline text="ルート要素削除指定、レベルシフト指定を追加" />
            </outline>
          </outline>
        </outline>
        <outline text="処理概要">
          <outline text="事前準備">
            <outline text="引数の既定値設定" />
            <outline text="階層を判定、一定以上なら処理中断" />
            <outline text="処理対象テキストを行毎に分割、v.lineに格納" />
            <outline text="ルート要素の有無、レベルを判定" />
          </outline>
          <outline text="処理対象テキストを一行毎に処理">
            <outline text="MD文書のタイトル行だった場合(ex. ## hoge)">
              <outline text="親文書の挿入箇所のレベルに&quot;#&quot;の数を加えてタイトル行として出力" />
            </outline>
            <outline text="挿入指定行だった場合(ex. //::hoge.js::)" />
            <outline text="いずれでもない場合" />
          </outline>
        </outline>
        <outline text="引数">
          <outline text="content {string} 処理対象テキスト" />
          <outline text="opt">
            <outline text="maxDepth {number}=10 最深階層(無限ループ防止)" />
            <outline text="encoding {string}='utf-8' 入力ファイルのエンコード" />
            <outline text="parentLevel {number}=0 挿入指定文字列が置かれた位置の親要素のレベル" />
            <outline text="useRoot {boolean}=false 子文書ルート使用指定" _note="true : 子文書のルート要素を使用する&#10;false : 子文書のルート要素は使用しない(呼出元の要素をルート要素として扱う)&#10;" />
          </outline>
        </outline>
        <outline text="戻り値 {string} 埋込後の処理対象テキスト" />
      </outline>
    </outline>
  </body>
</opml>
